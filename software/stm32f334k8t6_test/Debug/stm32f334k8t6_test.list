
stm32f334k8t6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e00  08003e00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e00  08003e00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e00  08003e00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fada  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c03  00000000  00000000  0002fb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00031720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c90  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200f5  00000000  00000000  000330e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001056e  00000000  00000000  000531dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c65fb  00000000  00000000  0006374b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129d46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003808  00000000  00000000  00129d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003db0 	.word	0x08003db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003db0 	.word	0x08003db0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb56 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f96a 	bl	80004ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001d8:	f000 f938 	bl	800044c <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80001dc:	f000 f872 	bl	80002c4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80001e0:	f000 f8ce 	bl	8000380 <MX_TIM3_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80001e4:	2180      	movs	r1, #128	; 0x80
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ea:	f001 fafb 	bl	80017e4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80001ee:	2101      	movs	r1, #1
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <main+0x40>)
 80001f2:	f001 faf7 	bl	80017e4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80001f6:	2102      	movs	r1, #2
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x40>)
 80001fa:	f001 faf3 	bl	80017e4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000202:	f000 fba1 	bl	8000948 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000206:	e7ed      	b.n	80001e4 <main+0x1c>
 8000208:	48000400 	.word	0x48000400

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	; 0x58
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fdc0 	bl	8003da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 031c 	add.w	r3, r7, #28
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000256:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fad9 	bl	8001818 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800026c:	f000 f99c 	bl	80005a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	f107 031c 	add.w	r3, r7, #28
 800028a:	2102      	movs	r1, #2
 800028c:	4618      	mov	r0, r3
 800028e:	f002 f9cb 	bl	8002628 <HAL_RCC_ClockConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000298:	f000 f986 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 800029c:	2381      	movs	r3, #129	; 0x81
 800029e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	463b      	mov	r3, r7
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 fbf1 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002b8:	f000 f976 	bl	80005a8 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3758      	adds	r7, #88	; 0x58
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80002da:	4b27      	ldr	r3, [pc, #156]	; (8000378 <MX_ADC2_Init+0xb4>)
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <MX_ADC2_Init+0xb8>)
 80002de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <MX_ADC2_Init+0xb4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_ADC2_Init+0xb4>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_ADC2_Init+0xb4>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_ADC2_Init+0xb4>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <MX_ADC2_Init+0xb4>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000302:	2200      	movs	r2, #0
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000308:	2201      	movs	r2, #1
 800030a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_ADC2_Init+0xb4>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000314:	2201      	movs	r2, #1
 8000316:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_ADC2_Init+0xb4>)
 800031a:	2200      	movs	r2, #0
 800031c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000322:	2204      	movs	r2, #4
 8000324:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000328:	2200      	movs	r2, #0
 800032a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_ADC2_Init+0xb4>)
 800032e:	2200      	movs	r2, #0
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000334:	f000 fb2c 	bl	8000990 <HAL_ADC_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800033e:	f000 f933 	bl	80005a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000342:	2301      	movs	r3, #1
 8000344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000346:	2301      	movs	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <MX_ADC2_Init+0xb4>)
 8000360:	f000 fca8 	bl	8000cb4 <HAL_ADC_ConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800036a:	f000 f91d 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028
 800037c:	50000100 	.word	0x50000100

08000380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	f107 031c 	add.w	r3, r7, #28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003a6:	4a28      	ldr	r2, [pc, #160]	; (8000448 <MX_TIM3_Init+0xc8>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ca:	481e      	ldr	r0, [pc, #120]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003cc:	f002 fc98 	bl	8002d00 <HAL_TIM_PWM_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80003d6:	f000 f8e7 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e2:	f107 031c 	add.w	r3, r7, #28
 80003e6:	4619      	mov	r1, r3
 80003e8:	4816      	ldr	r0, [pc, #88]	; (8000444 <MX_TIM3_Init+0xc4>)
 80003ea:	f003 f913 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80003f4:	f000 f8d8 	bl	80005a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f8:	2360      	movs	r3, #96	; 0x60
 80003fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000408:	463b      	mov	r3, r7
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	480d      	ldr	r0, [pc, #52]	; (8000444 <MX_TIM3_Init+0xc4>)
 8000410:	f002 fcce 	bl	8002db0 <HAL_TIM_PWM_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800041a:	f000 f8c5 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	2204      	movs	r2, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <MX_TIM3_Init+0xc4>)
 8000426:	f002 fcc3 	bl	8002db0 <HAL_TIM_PWM_ConfigChannel>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000430:	f000 f8ba 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <MX_TIM3_Init+0xc4>)
 8000436:	f000 f93f 	bl	80006b8 <HAL_TIM_MspPostInit>

}
 800043a:	bf00      	nop
 800043c:	3728      	adds	r7, #40	; 0x28
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000078 	.word	0x20000078
 8000448:	40000400 	.word	0x40000400

0800044c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <MX_USART1_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000458:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800045c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000490:	f003 f92e 	bl	80036f0 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f000 f885 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000c4 	.word	0x200000c4
 80004a8:	40013800 	.word	0x40013800

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c2:	4b36      	ldr	r3, [pc, #216]	; (800059c <MX_GPIO_Init+0xf0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a35      	ldr	r2, [pc, #212]	; (800059c <MX_GPIO_Init+0xf0>)
 80004c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b33      	ldr	r3, [pc, #204]	; (800059c <MX_GPIO_Init+0xf0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_GPIO_Init+0xf0>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a2f      	ldr	r2, [pc, #188]	; (800059c <MX_GPIO_Init+0xf0>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_GPIO_Init+0xf0>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_GPIO_Init+0xf0>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a29      	ldr	r2, [pc, #164]	; (800059c <MX_GPIO_Init+0xf0>)
 80004f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xf0>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|U3_IN1_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f248 0180 	movw	r1, #32896	; 0x8080
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f001 f94e 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|U3_IN2_Pin|U1_IN1_Pin
 8000518:	2200      	movs	r2, #0
 800051a:	21cb      	movs	r1, #203	; 0xcb
 800051c:	4820      	ldr	r0, [pc, #128]	; (80005a0 <MX_GPIO_Init+0xf4>)
 800051e:	f001 f949 	bl	80017b4 <HAL_GPIO_WritePin>
                          |U1_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000522:	2303      	movs	r3, #3
 8000524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	481b      	ldr	r0, [pc, #108]	; (80005a4 <MX_GPIO_Init+0xf8>)
 8000536:	f000 ffcb 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : J7_GPIO_Pin J9_GPIO_Pin J8_GPIO_Pin J10_GPIO_Pin
                           J11_GPIO_Pin */
  GPIO_InitStruct.Pin = J7_GPIO_Pin|J9_GPIO_Pin|J8_GPIO_Pin|J10_GPIO_Pin
 800053a:	f240 130f 	movw	r3, #271	; 0x10f
 800053e:	60fb      	str	r3, [r7, #12]
                          |J11_GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f000 ffbd 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin U3_IN1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|U3_IN1_Pin;
 8000556:	f248 0380 	movw	r3, #32896	; 0x8080
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f000 ffad 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin U3_IN2_Pin U1_IN1_Pin
                           U1_IN2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|U3_IN2_Pin|U1_IN1_Pin
 8000576:	23cb      	movs	r3, #203	; 0xcb
 8000578:	60fb      	str	r3, [r7, #12]
                          |U1_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_GPIO_Init+0xf4>)
 800058e:	f000 ff9f 	bl	80014d0 <HAL_GPIO_Init>

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000400 	.word	0x48000400
 80005a4:	48001400 	.word	0x48001400

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x44>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_MspInit+0x44>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x44>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_MspInit+0x44>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_MspInit+0x44>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_MspInit+0x44>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a15      	ldr	r2, [pc, #84]	; (8000670 <HAL_ADC_MspInit+0x74>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d124      	bne.n	8000668 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_ADC_MspInit+0x78>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_ADC_MspInit+0x78>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_ADC_MspInit+0x78>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_ADC_MspInit+0x78>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_ADC_MspInit+0x78>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_ADC_MspInit+0x78>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 800064e:	2310      	movs	r3, #16
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000652:	2303      	movs	r3, #3
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 ff34 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	; 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	50000100 	.word	0x50000100
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_TIM_PWM_MspInit+0x38>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d10b      	bne.n	80006a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40000400 	.word	0x40000400
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_TIM_MspPostInit+0x64>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d11b      	bne.n	8000712 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <HAL_TIM_MspPostInit+0x68>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <HAL_TIM_MspPostInit+0x68>)
 80006e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_TIM_MspPostInit+0x68>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = U3_PWM_Pin|U3_PWMB5_Pin;
 80006f2:	2330      	movs	r3, #48	; 0x30
 80006f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000702:	2302      	movs	r3, #2
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <HAL_TIM_MspPostInit+0x6c>)
 800070e:	f000 fedf 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40000400 	.word	0x40000400
 8000720:	40021000 	.word	0x40021000
 8000724:	48000400 	.word	0x48000400

08000728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_UART_MspInit+0x80>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d129      	bne.n	800079e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_UART_MspInit+0x84>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UNUSED_Pin|RC_RX_Pin;
 800077a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800078c:	2307      	movs	r3, #7
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fe99 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40013800 	.word	0x40013800
 80007ac:	40021000 	.word	0x40021000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f884 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490e      	ldr	r1, [pc, #56]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0b      	ldr	r4, [pc, #44]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffd7 	bl	8000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f003 fa7f 	bl	8003d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fcb5 	bl	80001c8 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800086c:	08003e08 	.word	0x08003e08
  ldr r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000874:	2000014c 	.word	0x2000014c

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 fdeb 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fe8c 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fdf5 	bl	80014b6 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e4:	f000 fdcb 	bl	800147e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	20000148 	.word	0x20000148

08000930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;  
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000148 	.word	0x20000148

08000948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09a      	sub	sp, #104	; 0x68
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e172      	b.n	8000c96 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d176      	bne.n	8000ab0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d152      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fe09 	bl	80005fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d13b      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 fc1d 	bl	8001238 <ADC_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d12f      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
 8000a10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d12b      	bne.n	8000a70 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a3a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a4c:	4b94      	ldr	r3, [pc, #592]	; (8000ca0 <HAL_ADC_Init+0x310>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a94      	ldr	r2, [pc, #592]	; (8000ca4 <HAL_ADC_Init+0x314>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9a      	lsrs	r2, r3, #18
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a62:	e002      	b.n	8000a6a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f9      	bne.n	8000a64 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a8c:	d110      	bne.n	8000ab0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f023 0312 	bic.w	r3, r3, #18
 8000a96:	f043 0210 	orr.w	r2, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f043 0201 	orr.w	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f040 80df 	bne.w	8000c7c <HAL_ADC_Init+0x2ec>
 8000abe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 80da 	bne.w	8000c7c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 80d2 	bne.w	8000c7c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ae0:	f043 0202 	orr.w	r2, r3, #2
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae8:	4b6f      	ldr	r3, [pc, #444]	; (8000ca8 <HAL_ADC_Init+0x318>)
 8000aea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0x16c>
 8000af6:	4b6d      	ldr	r3, [pc, #436]	; (8000cac <HAL_ADC_Init+0x31c>)
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	e002      	b.n	8000b02 <HAL_ADC_Init+0x172>
 8000afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b00:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d108      	bne.n	8000b22 <HAL_ADC_Init+0x192>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d101      	bne.n	8000b22 <HAL_ADC_Init+0x192>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <HAL_ADC_Init+0x194>
 8000b22:	2300      	movs	r3, #0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11c      	bne.n	8000b62 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b28:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d010      	beq.n	8000b50 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d107      	bne.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d101      	bne.n	8000b4a <HAL_ADC_Init+0x1ba>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_ADC_Init+0x1bc>
 8000b4a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b60:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7e5b      	ldrb	r3, [r3, #25]
 8000b66:	035b      	lsls	r3, r3, #13
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b6c:	2a01      	cmp	r2, #1
 8000b6e:	d002      	beq.n	8000b76 <HAL_ADC_Init+0x1e6>
 8000b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b74:	e000      	b.n	8000b78 <HAL_ADC_Init+0x1e8>
 8000b76:	2200      	movs	r2, #0
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d11b      	bne.n	8000bce <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7e5b      	ldrb	r3, [r3, #25]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d109      	bne.n	8000bb2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	045a      	lsls	r2, r3, #17
 8000ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bae:	663b      	str	r3, [r7, #96]	; 0x60
 8000bb0:	e00d      	b.n	8000bce <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000bba:	f043 0220 	orr.w	r2, r3, #32
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f043 0201 	orr.w	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d007      	beq.n	8000be6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	4313      	orrs	r3, r2
 8000be0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000be2:	4313      	orrs	r3, r2
 8000be4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d114      	bne.n	8000c1e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e1b      	ldrb	r3, [r3, #24]
 8000c0c:	039a      	lsls	r2, r3, #14
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_ADC_Init+0x320>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10c      	bne.n	8000c54 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f023 010f 	bic.w	r1, r3, #15
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
 8000c52:	e007      	b.n	8000c64 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 020f 	bic.w	r2, r2, #15
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7a:	e00a      	b.n	8000c92 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f023 0312 	bic.w	r3, r3, #18
 8000c84:	f043 0210 	orr.w	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3768      	adds	r7, #104	; 0x68
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	50000300 	.word	0x50000300
 8000cac:	50000100 	.word	0x50000100
 8000cb0:	fff0c007 	.word	0xfff0c007

08000cb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b09b      	sub	sp, #108	; 0x6c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d101      	bne.n	8000cd6 <HAL_ADC_ConfigChannel+0x22>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e2a5      	b.n	8001222 <HAL_ADC_ConfigChannel+0x56e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 8289 	bne.w	8001200 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d81c      	bhi.n	8000d30 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	231f      	movs	r3, #31
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4019      	ands	r1, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa00 f203 	lsl.w	r2, r0, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d2e:	e063      	b.n	8000df8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	d81e      	bhi.n	8000d76 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	3b1e      	subs	r3, #30
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4019      	ands	r1, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	3b1e      	subs	r3, #30
 8000d68:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
 8000d74:	e040      	b.n	8000df8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b0e      	cmp	r3, #14
 8000d7c:	d81e      	bhi.n	8000dbc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	3b3c      	subs	r3, #60	; 0x3c
 8000d92:	221f      	movs	r2, #31
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4019      	ands	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	3b3c      	subs	r3, #60	; 0x3c
 8000dae:	fa00 f203 	lsl.w	r2, r0, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dba:	e01d      	b.n	8000df8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	3b5a      	subs	r3, #90	; 0x5a
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4019      	ands	r1, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	3b5a      	subs	r3, #90	; 0x5a
 8000dec:	fa00 f203 	lsl.w	r2, r0, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80e5 	bne.w	8000fd2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	d91c      	bls.n	8000e4a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6999      	ldr	r1, [r3, #24]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	3b1e      	subs	r3, #30
 8000e22:	2207      	movs	r2, #7
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4019      	ands	r1, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	6898      	ldr	r0, [r3, #8]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	3b1e      	subs	r3, #30
 8000e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	619a      	str	r2, [r3, #24]
 8000e48:	e019      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6959      	ldr	r1, [r3, #20]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4019      	ands	r1, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6898      	ldr	r0, [r3, #8]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	fa00 f203 	lsl.w	r2, r0, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d84f      	bhi.n	8000f40 <HAL_ADC_ConfigChannel+0x28c>
 8000ea0:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_ADC_ConfigChannel+0x1f4>)
 8000ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea6:	bf00      	nop
 8000ea8:	08000eb9 	.word	0x08000eb9
 8000eac:	08000edb 	.word	0x08000edb
 8000eb0:	08000efd 	.word	0x08000efd
 8000eb4:	08000f1f 	.word	0x08000f1f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ebe:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <HAL_ADC_ConfigChannel+0x484>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	0691      	lsls	r1, r2, #26
 8000ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ed6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ed8:	e07e      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ee0:	4b95      	ldr	r3, [pc, #596]	; (8001138 <HAL_ADC_ConfigChannel+0x484>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	0691      	lsls	r1, r2, #26
 8000eea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eec:	430a      	orrs	r2, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ef8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000efa:	e06d      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f02:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <HAL_ADC_ConfigChannel+0x484>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	0691      	lsls	r1, r2, #26
 8000f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f1a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f1c:	e05c      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f24:	4b84      	ldr	r3, [pc, #528]	; (8001138 <HAL_ADC_ConfigChannel+0x484>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	0691      	lsls	r1, r2, #26
 8000f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f30:	430a      	orrs	r2, r1
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f3c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f3e:	e04b      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	069b      	lsls	r3, r3, #26
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d107      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f62:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	069b      	lsls	r3, r3, #26
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d107      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f86:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	069b      	lsls	r3, r3, #26
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d107      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000faa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	069b      	lsls	r3, r3, #26
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d10a      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000fd0:	e001      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000fd2:	bf00      	nop
 8000fd4:	e000      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000fd6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x344>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x344>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x346>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 810b 	bne.w	8001216 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d00f      	beq.n	8001028 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	400a      	ands	r2, r1
 8001022:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001026:	e049      	b.n	80010bc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d91c      	bls.n	8001084 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6999      	ldr	r1, [r3, #24]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	3b1b      	subs	r3, #27
 800105c:	2207      	movs	r2, #7
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	4019      	ands	r1, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	6898      	ldr	r0, [r3, #8]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	3b1b      	subs	r3, #27
 8001076:	fa00 f203 	lsl.w	r2, r0, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	619a      	str	r2, [r3, #24]
 8001082:	e01b      	b.n	80010bc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6959      	ldr	r1, [r3, #20]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	4019      	ands	r1, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6898      	ldr	r0, [r3, #8]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	fa00 f203 	lsl.w	r2, r0, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <HAL_ADC_ConfigChannel+0x488>)
 80010be:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d105      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80010c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d015      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80010d8:	2b11      	cmp	r3, #17
 80010da:	d105      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	f040 8092 	bne.w	8001216 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80010f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 808b 	bne.w	8001216 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001108:	d102      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x45c>
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_ADC_ConfigChannel+0x48c>)
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e002      	b.n	8001116 <HAL_ADC_ConfigChannel+0x462>
 8001110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001114:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b01      	cmp	r3, #1
 8001122:	d10f      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x490>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x490>
 8001132:	2301      	movs	r3, #1
 8001134:	e007      	b.n	8001146 <HAL_ADC_ConfigChannel+0x492>
 8001136:	bf00      	nop
 8001138:	83fff000 	.word	0x83fff000
 800113c:	50000300 	.word	0x50000300
 8001140:	50000100 	.word	0x50000100
 8001144:	2300      	movs	r3, #0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d150      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800114a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800114c:	2b00      	cmp	r3, #0
 800114e:	d010      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d107      	bne.n	800116c <HAL_ADC_ConfigChannel+0x4b8>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_ADC_ConfigChannel+0x4b8>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_ADC_ConfigChannel+0x4ba>
 800116c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800116e:	2b00      	cmp	r3, #0
 8001170:	d13c      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d11d      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x502>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001182:	d118      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800118c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_ADC_ConfigChannel+0x57c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_ADC_ConfigChannel+0x580>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9a      	lsrs	r2, r3, #18
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011a6:	e002      	b.n	80011ae <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f9      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011b4:	e02e      	b.n	8001214 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b11      	cmp	r3, #17
 80011bc:	d10b      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x522>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c6:	d106      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80011c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80011d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011d4:	e01e      	b.n	8001214 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d11a      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80011de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011ea:	e013      	b.n	8001214 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f043 0220 	orr.w	r2, r3, #32
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011fe:	e00a      	b.n	8001216 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f043 0220 	orr.w	r2, r3, #32
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001212:	e000      	b.n	8001216 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001214:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800121e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001222:	4618      	mov	r0, r3
 8001224:	376c      	adds	r7, #108	; 0x6c
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <ADC_Disable+0x2c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <ADC_Disable+0x2c>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <ADC_Disable+0x2e>
 8001264:	2300      	movs	r3, #0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d047      	beq.n	80012fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030d 	and.w	r3, r3, #13
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10f      	bne.n	8001298 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0202 	orr.w	r2, r2, #2
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2203      	movs	r2, #3
 800128e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001290:	f7ff fb4e 	bl	8000930 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001296:	e029      	b.n	80012ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f043 0210 	orr.w	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e023      	b.n	80012fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012b4:	f7ff fb3c 	bl	8000930 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d914      	bls.n	80012ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10d      	bne.n	80012ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e007      	b.n	80012fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d0dc      	beq.n	80012b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff47 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff5c 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff8e 	bl	80013bc <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffb0 	bl	8001424 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e14e      	b.n	800177e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8140 	beq.w	8001778 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d005      	beq.n	8001510 <HAL_GPIO_Init+0x40>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001546:	2201      	movs	r2, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	f003 0201 	and.w	r2, r3, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b03      	cmp	r3, #3
 800157c:	d017      	beq.n	80015ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d123      	bne.n	8001602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	6939      	ldr	r1, [r7, #16]
 80015fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0203 	and.w	r2, r3, #3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 809a 	beq.w	8001778 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <HAL_GPIO_Init+0x2cc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_GPIO_Init+0x2cc>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_GPIO_Init+0x2cc>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001686:	d013      	beq.n	80016b0 <HAL_GPIO_Init+0x1e0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1dc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <HAL_GPIO_Init+0x2d8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1d8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a44      	ldr	r2, [pc, #272]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1d4>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e006      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016a4:	2305      	movs	r3, #5
 80016a6:	e004      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016b0:	2300      	movs	r3, #0
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	f002 0203 	and.w	r2, r2, #3
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c2:	4937      	ldr	r1, [pc, #220]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d0:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016f4:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f aea9 	bne.w	80014e0 <HAL_GPIO_Init+0x10>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000800 	.word	0x48000800
 80017ac:	48000c00 	.word	0x48000c00
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43d9      	mvns	r1, r3
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	400b      	ands	r3, r1
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800181e:	af00      	add	r7, sp, #0
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f000 bef4 	b.w	800261a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 816a 	beq.w	8001b16 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001842:	4bb3      	ldr	r3, [pc, #716]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b04      	cmp	r3, #4
 800184c:	d00c      	beq.n	8001868 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800184e:	4bb0      	ldr	r3, [pc, #704]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d159      	bne.n	800190e <HAL_RCC_OscConfig+0xf6>
 800185a:	4bad      	ldr	r3, [pc, #692]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d152      	bne.n	800190e <HAL_RCC_OscConfig+0xf6>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800187c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x82>
 8001894:	4b9e      	ldr	r3, [pc, #632]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0xae>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018c2:	4b93      	ldr	r3, [pc, #588]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018da:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 810c 	beq.w	8001b14 <HAL_RCC_OscConfig+0x2fc>
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8106 	bne.w	8001b14 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	f000 be86 	b.w	800261a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x110>
 800191a:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7c      	ldr	r2, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e030      	b.n	800198a <HAL_RCC_OscConfig+0x172>
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x134>
 8001932:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a73      	ldr	r2, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01e      	b.n	800198a <HAL_RCC_OscConfig+0x172>
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x15a>
 8001958:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6c      	ldr	r2, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800195e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a69      	ldr	r2, [pc, #420]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x172>
 8001972:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a66      	ldr	r2, [pc, #408]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a63      	ldr	r2, [pc, #396]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800198a:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f023 020f 	bic.w	r2, r3, #15
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	495d      	ldr	r1, [pc, #372]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 800199a:	4313      	orrs	r3, r2
 800199c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d059      	beq.n	8001a5c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7fe ffc2 	bl	8000930 <HAL_GetTick>
 80019ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b2:	f7fe ffbd 	bl	8000930 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d902      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f000 be29 	b.w	800261a <HAL_RCC_OscConfig+0xe02>
 80019c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0x1e2>
 80019f4:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x20e>
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a16:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a3a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ab      	beq.n	80019b2 <HAL_RCC_OscConfig+0x19a>
 8001a5a:	e05c      	b.n	8001b16 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7fe ff68 	bl	8000930 <HAL_GetTick>
 8001a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a66:	f7fe ff63 	bl	8000930 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d902      	bls.n	8001a7c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f000 bdcf 	b.w	800261a <HAL_RCC_OscConfig+0xe02>
 8001a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d102      	bne.n	8001aae <HAL_RCC_OscConfig+0x296>
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x2c2>
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001aca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_RCC_OscConfig+0x2f8>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ade:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ae2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ae6:	fa92 f2a2 	rbit	r2, r2
 8001aea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001aee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001af2:	fab2 f282 	clz	r2, r2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f042 0220 	orr.w	r2, r2, #32
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f002 021f 	and.w	r2, r2, #31
 8001b02:	2101      	movs	r1, #1
 8001b04:	fa01 f202 	lsl.w	r2, r1, r2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ab      	bne.n	8001a66 <HAL_RCC_OscConfig+0x24e>
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_OscConfig+0x2fe>
 8001b10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 816f 	beq.w	8001e04 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b26:	4bd0      	ldr	r3, [pc, #832]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b32:	4bcd      	ldr	r3, [pc, #820]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d16c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x400>
 8001b3e:	4bca      	ldr	r3, [pc, #808]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d166      	bne.n	8001c18 <HAL_RCC_OscConfig+0x400>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x362>
 8001b74:	4bbc      	ldr	r3, [pc, #752]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e013      	b.n	8001ba2 <HAL_RCC_OscConfig+0x38a>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b9e:	4bb2      	ldr	r3, [pc, #712]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ba8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001bac:	fa92 f2a2 	rbit	r2, r2
 8001bb0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001bb4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	f002 021f 	and.w	r2, r2, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3cc>
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d002      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f000 bd1b 	b.w	800261a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4ba0      	ldr	r3, [pc, #640]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	21f8      	movs	r1, #248	; 0xf8
 8001bf4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bfc:	fa91 f1a1 	rbit	r1, r1
 8001c00:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c04:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c08:	fab1 f181 	clz	r1, r1
 8001c0c:	b2c9      	uxtb	r1, r1
 8001c0e:	408b      	lsls	r3, r1
 8001c10:	4995      	ldr	r1, [pc, #596]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	e0f5      	b.n	8001e04 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8085 	beq.w	8001d2e <HAL_RCC_OscConfig+0x516>
 8001c24:	2301      	movs	r3, #1
 8001c26:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe fe6e 	bl	8000930 <HAL_GetTick>
 8001c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7fe fe69 	bl	8000930 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d902      	bls.n	8001c70 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f000 bcd5 	b.w	800261a <HAL_RCC_OscConfig+0xe02>
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c82:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x488>
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e013      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4b0>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cd2:	fa92 f2a2 	rbit	r2, r2
 8001cd6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cda:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	f042 0220 	orr.w	r2, r2, #32
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f002 021f 	and.w	r2, r2, #31
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0af      	beq.n	8001c5a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	21f8      	movs	r1, #248	; 0xf8
 8001d0a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d12:	fa91 f1a1 	rbit	r1, r1
 8001d16:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d1a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d1e:	fab1 f181 	clz	r1, r1
 8001d22:	b2c9      	uxtb	r1, r1
 8001d24:	408b      	lsls	r3, r1
 8001d26:	4950      	ldr	r1, [pc, #320]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e06a      	b.n	8001e04 <HAL_RCC_OscConfig+0x5ec>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	461a      	mov	r2, r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fde9 	bl	8000930 <HAL_GetTick>
 8001d5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d64:	f7fe fde4 	bl	8000930 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d902      	bls.n	8001d7a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f000 bc50 	b.w	800261a <HAL_RCC_OscConfig+0xe02>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x592>
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e013      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5ba>
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_RCC_OscConfig+0x650>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dd8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ddc:	fa92 f2a2 	rbit	r2, r2
 8001de0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001de4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1af      	bne.n	8001d64 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80da 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d069      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x6da>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_OscConfig+0x654>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	461a      	mov	r2, r3
 8001e44:	2301      	movs	r3, #1
 8001e46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7fe fd72 	bl	8000930 <HAL_GetTick>
 8001e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e50:	e00e      	b.n	8001e70 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7fe fd6d 	bl	8000930 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d906      	bls.n	8001e70 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e3d9      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	10908120 	.word	0x10908120
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001eb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4ba5      	ldr	r3, [pc, #660]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8001eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eba:	2102      	movs	r1, #2
 8001ebc:	6019      	str	r1, [r3, #0]
 8001ebe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f1a3 	rbit	r1, r3
 8001ec8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ecc:	6019      	str	r1, [r3, #0]
  return result;
 8001ece:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0b0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x63a>
 8001ef0:	e06a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7b0>
 8001ef2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f08:	601a      	str	r2, [r3, #0]
  return result;
 8001f0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f0e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b8c      	ldr	r3, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0x934>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7fe fd04 	bl	8000930 <HAL_GetTick>
 8001f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fcff 	bl	8000930 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e36b      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 8001f42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f46:	2202      	movs	r2, #2
 8001f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fa93 f2a3 	rbit	r2, r3
 8001f54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f5e:	2202      	movs	r2, #2
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8001f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f92:	2102      	movs	r1, #2
 8001f94:	6019      	str	r1, [r3, #0]
 8001f96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f1a3 	rbit	r1, r3
 8001fa0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fa4:	6019      	str	r1, [r3, #0]
  return result;
 8001fa6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1b2      	bne.n	8001f2e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8158 	beq.w	8002288 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d112      	bne.n	8002010 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b57      	ldr	r3, [pc, #348]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a56      	ldr	r2, [pc, #344]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <HAL_RCC_OscConfig+0x938>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11a      	bne.n	8002052 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x938>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_RCC_OscConfig+0x938>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002028:	f7fe fc82 	bl	8000930 <HAL_GetTick>
 800202c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	e009      	b.n	8002046 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7fe fc7d 	bl	8000930 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e2e9      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_RCC_OscConfig+0x938>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0ef      	beq.n	8002032 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x852>
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a39      	ldr	r2, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	e02f      	b.n	80020ca <HAL_RCC_OscConfig+0x8b2>
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x876>
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a33      	ldr	r2, [pc, #204]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a30      	ldr	r2, [pc, #192]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e01d      	b.n	80020ca <HAL_RCC_OscConfig+0x8b2>
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x89a>
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x8b2>
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a24      	ldr	r2, [pc, #144]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d06b      	beq.n	80021ac <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fc2c 	bl	8000930 <HAL_GetTick>
 80020d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fc27 	bl	8000930 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e291      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 80020f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002124:	601a      	str	r2, [r3, #0]
  return result;
 8002126:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800212a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d109      	bne.n	8002154 <HAL_RCC_OscConfig+0x93c>
 8002140:	4b01      	ldr	r3, [pc, #4]	; (8002148 <HAL_RCC_OscConfig+0x930>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x958>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	10908120 	.word	0x10908120
 8002150:	40007000 	.word	0x40007000
 8002154:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002158:	2202      	movs	r2, #2
 800215a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4bbb      	ldr	r3, [pc, #748]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002174:	2102      	movs	r1, #2
 8002176:	6011      	str	r1, [r2, #0]
 8002178:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	fa92 f1a2 	rbit	r1, r2
 8002182:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002186:	6011      	str	r1, [r2, #0]
  return result;
 8002188:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d099      	beq.n	80020de <HAL_RCC_OscConfig+0x8c6>
 80021aa:	e063      	b.n	8002274 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fbc0 	bl	8000930 <HAL_GetTick>
 80021b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fbbb 	bl	8000930 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e225      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 80021ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021fc:	601a      	str	r2, [r3, #0]
  return result;
 80021fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002202:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d102      	bne.n	800221e <HAL_RCC_OscConfig+0xa06>
 8002218:	4b90      	ldr	r3, [pc, #576]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	e00d      	b.n	800223a <HAL_RCC_OscConfig+0xa22>
 800221e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800223e:	2102      	movs	r1, #2
 8002240:	6011      	str	r1, [r2, #0]
 8002242:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	fa92 f1a2 	rbit	r1, r2
 800224c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002250:	6011      	str	r1, [r2, #0]
  return result;
 8002252:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	fab2 f282 	clz	r2, r2
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f002 021f 	and.w	r2, r2, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1a0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002274:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b77      	ldr	r3, [pc, #476]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a76      	ldr	r2, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 81c2 	beq.w	8002618 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002294:	4b71      	ldr	r3, [pc, #452]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	f000 819c 	beq.w	80025da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f040 8114 	bne.w	80024d6 <HAL_RCC_OscConfig+0xcbe>
 80022ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022c6:	601a      	str	r2, [r3, #0]
  return result;
 80022c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	461a      	mov	r2, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fb24 	bl	8000930 <HAL_GetTick>
 80022e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	e009      	b.n	8002302 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fb1f 	bl	8000930 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e18b      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 8002302:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fa93 f2a3 	rbit	r2, r3
 8002316:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800231a:	601a      	str	r2, [r3, #0]
  return result;
 800231c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_RCC_OscConfig+0xb24>
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	e01b      	b.n	8002374 <HAL_RCC_OscConfig+0xb5c>
 800233c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800235a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	fa92 f1a2 	rbit	r1, r2
 8002388:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800238c:	6011      	str	r1, [r2, #0]
  return result;
 800238e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d19e      	bne.n	80022ee <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fa95 	bl	8000930 <HAL_GetTick>
 8002406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240a:	e009      	b.n	8002420 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fa90 	bl	8000930 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0fc      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 8002420:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002438:	601a      	str	r2, [r3, #0]
  return result;
 800243a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800243e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0xc48>
 8002454:	4b01      	ldr	r3, [pc, #4]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e01e      	b.n	8002498 <HAL_RCC_OscConfig+0xc80>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800247e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_OscConfig+0xe0c>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800249c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fa92 f1a2 	rbit	r1, r2
 80024ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024b0:	6011      	str	r1, [r2, #0]
  return result;
 80024b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d09b      	beq.n	800240c <HAL_RCC_OscConfig+0xbf4>
 80024d4:	e0a0      	b.n	8002618 <HAL_RCC_OscConfig+0xe00>
 80024d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fa10 	bl	8000930 <HAL_GetTick>
 8002510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	e009      	b.n	800252a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fa0b 	bl	8000930 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e077      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
 800252a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002542:	601a      	str	r2, [r3, #0]
  return result;
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_OscConfig+0xd4c>
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_OscConfig+0xe0c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e01b      	b.n	800259c <HAL_RCC_OscConfig+0xd84>
 8002564:	f107 0320 	add.w	r3, r7, #32
 8002568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f107 0318 	add.w	r3, r7, #24
 8002582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f107 0318 	add.w	r3, r7, #24
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_OscConfig+0xe0c>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f107 0210 	add.w	r2, r7, #16
 80025a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025a4:	6011      	str	r1, [r2, #0]
 80025a6:	f107 0210 	add.w	r2, r7, #16
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fa92 f1a2 	rbit	r1, r2
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	6011      	str	r1, [r2, #0]
  return result;
 80025b6:	f107 020c 	add.w	r2, r7, #12
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f002 021f 	and.w	r2, r2, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d19e      	bne.n	8002516 <HAL_RCC_OscConfig+0xcfe>
 80025d8:	e01e      	b.n	8002618 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e018      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_RCC_OscConfig+0xe0c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d108      	bne.n	8002614 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002602:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b09e      	sub	sp, #120	; 0x78
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e162      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b90      	ldr	r3, [pc, #576]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b8d      	ldr	r3, [pc, #564]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	498b      	ldr	r1, [pc, #556]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e14a      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	497f      	ldr	r1, [pc, #508]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80dc 	beq.w	8002854 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d13c      	bne.n	800271e <HAL_RCC_ClockConfig+0xf6>
 80026a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_ClockConfig+0xa6>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e00f      	b.n	80026ee <HAL_RCC_ClockConfig+0xc6>
 80026ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	667b      	str	r3, [r7, #100]	; 0x64
 80026dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
 80026e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80026f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f6:	fa92 f2a2 	rbit	r2, r2
 80026fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d17b      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0f3      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d13c      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x178>
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_RCC_ClockConfig+0x128>
 800274a:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e00f      	b.n	8002770 <HAL_RCC_ClockConfig+0x148>
 8002750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	643b      	str	r3, [r7, #64]	; 0x40
 8002764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276c:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002774:	63ba      	str	r2, [r7, #56]	; 0x38
 8002776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002778:	fa92 f2a2 	rbit	r2, r2
 800277c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800277e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d13a      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b2      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
 80027a0:	2302      	movs	r3, #2
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e00d      	b.n	80027e4 <HAL_RCC_ClockConfig+0x1bc>
 80027c8:	2302      	movs	r3, #2
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	2302      	movs	r3, #2
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2202      	movs	r2, #2
 80027e6:	61ba      	str	r2, [r7, #24]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	617a      	str	r2, [r7, #20]
  return result;
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e079      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	491a      	ldr	r1, [pc, #104]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7fe f884 	bl	8000930 <HAL_GetTick>
 8002828:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe f880 	bl	8000930 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e061      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d214      	bcs.n	800288c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4906      	ldr	r1, [pc, #24]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e040      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	491a      	ldr	r1, [pc, #104]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4912      	ldr	r1, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ca:	f000 f829 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d8:	22f0      	movs	r2, #240	; 0xf0
 80028da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	fa92 f2a2 	rbit	r2, r2
 80028e2:	60fa      	str	r2, [r7, #12]
  return result;
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	40d3      	lsrs	r3, r2
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x2ec>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	fa21 f303 	lsr.w	r3, r1, r3
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_RCC_ClockConfig+0x2f0>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_ClockConfig+0x2f4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd ffd2 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3778      	adds	r7, #120	; 0x78
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	08003dc8 	.word	0x08003dc8
 8002918:	20000000 	.word	0x20000000
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b08b      	sub	sp, #44	; 0x2c
 8002924:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x30>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x36>
 800294e:	e03c      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002952:	623b      	str	r3, [r7, #32]
      break;
 8002954:	e03c      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800295c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002960:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	607a      	str	r2, [r7, #4]
  return result;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	40d3      	lsrs	r3, r2
 8002974:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	220f      	movs	r2, #15
 8002984:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	60fa      	str	r2, [r7, #12]
  return result;
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	40d3      	lsrs	r3, r2
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	e004      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	623b      	str	r3, [r7, #32]
      break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029cc:	623b      	str	r3, [r7, #32]
      break;
 80029ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	372c      	adds	r7, #44	; 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	08003de0 	.word	0x08003de0
 80029ec:	08003df0 	.word	0x08003df0
 80029f0:	003d0900 	.word	0x003d0900

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000000 	.word	0x20000000

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a12:	f7ff ffef 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	603a      	str	r2, [r7, #0]
  return result;
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	40d3      	lsrs	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08003dd8 	.word	0x08003dd8

08002a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a56:	f7ff ffcd 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a5a:	4601      	mov	r1, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	603a      	str	r2, [r7, #0]
  return result;
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	40d3      	lsrs	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08003dd8 	.word	0x08003dd8

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b092      	sub	sp, #72	; 0x48
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80cd 	beq.w	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab8:	4b8e      	ldr	r3, [pc, #568]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac4:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a8a      	ldr	r2, [pc, #552]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b85      	ldr	r3, [pc, #532]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aee:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a81      	ldr	r2, [pc, #516]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fd ff19 	bl	8000930 <HAL_GetTick>
 8002afe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fd ff15 	bl	8000930 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0ea      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b20:	4b74      	ldr	r3, [pc, #464]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d07d      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d076      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b94:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d045      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd fec6 	bl	8000930 <HAL_GetTick>
 8002ba4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fd fec2 	bl	8000930 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e095      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	2302      	movs	r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002bec:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	e007      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2202      	movs	r2, #2
 8002c04:	613a      	str	r2, [r7, #16]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	60fa      	str	r2, [r7, #12]
  return result;
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0bd      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c2c:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	492e      	ldr	r1, [pc, #184]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f023 0210 	bic.w	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	491a      	ldr	r1, [pc, #104]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4913      	ldr	r1, [pc, #76]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3748      	adds	r7, #72	; 0x48
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	10908100 	.word	0x10908100

08002d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e049      	b.n	8002da6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fca6 	bl	8000678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 f94a 	bl	8002fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0ff      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b14      	cmp	r3, #20
 8002dda:	f200 80f0 	bhi.w	8002fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e39 	.word	0x08002e39
 8002de8:	08002fbf 	.word	0x08002fbf
 8002dec:	08002fbf 	.word	0x08002fbf
 8002df0:	08002fbf 	.word	0x08002fbf
 8002df4:	08002e79 	.word	0x08002e79
 8002df8:	08002fbf 	.word	0x08002fbf
 8002dfc:	08002fbf 	.word	0x08002fbf
 8002e00:	08002fbf 	.word	0x08002fbf
 8002e04:	08002ebb 	.word	0x08002ebb
 8002e08:	08002fbf 	.word	0x08002fbf
 8002e0c:	08002fbf 	.word	0x08002fbf
 8002e10:	08002fbf 	.word	0x08002fbf
 8002e14:	08002efb 	.word	0x08002efb
 8002e18:	08002fbf 	.word	0x08002fbf
 8002e1c:	08002fbf 	.word	0x08002fbf
 8002e20:	08002fbf 	.word	0x08002fbf
 8002e24:	08002f3d 	.word	0x08002f3d
 8002e28:	08002fbf 	.word	0x08002fbf
 8002e2c:	08002fbf 	.word	0x08002fbf
 8002e30:	08002fbf 	.word	0x08002fbf
 8002e34:	08002f7d 	.word	0x08002f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f942 	bl	80030c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0208 	orr.w	r2, r2, #8
 8002e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6999      	ldr	r1, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	619a      	str	r2, [r3, #24]
      break;
 8002e76:	e0a5      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f9a8 	bl	80031d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6999      	ldr	r1, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	021a      	lsls	r2, r3, #8
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	619a      	str	r2, [r3, #24]
      break;
 8002eb8:	e084      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa07 	bl	80032d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0208 	orr.w	r2, r2, #8
 8002ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0204 	bic.w	r2, r2, #4
 8002ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69d9      	ldr	r1, [r3, #28]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	61da      	str	r2, [r3, #28]
      break;
 8002ef8:	e064      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fa65 	bl	80033d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69d9      	ldr	r1, [r3, #28]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	61da      	str	r2, [r3, #28]
      break;
 8002f3a:	e043      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 faa8 	bl	8003498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f7a:	e023      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fae6 	bl	8003554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop

08002fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <TIM_Base_SetConfig+0xdc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_Base_SetConfig+0x28>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0x28>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <TIM_Base_SetConfig+0xe0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d108      	bne.n	8003012 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <TIM_Base_SetConfig+0xdc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <TIM_Base_SetConfig+0x6a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d00f      	beq.n	8003042 <TIM_Base_SetConfig+0x6a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <TIM_Base_SetConfig+0xe0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00b      	beq.n	8003042 <TIM_Base_SetConfig+0x6a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <TIM_Base_SetConfig+0xe4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0x6a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <TIM_Base_SetConfig+0xe8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x6a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <TIM_Base_SetConfig+0xec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <TIM_Base_SetConfig+0xdc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00b      	beq.n	8003098 <TIM_Base_SetConfig+0xc0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <TIM_Base_SetConfig+0xe4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <TIM_Base_SetConfig+0xc0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <TIM_Base_SetConfig+0xe8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_Base_SetConfig+0xc0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <TIM_Base_SetConfig+0xec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d103      	bne.n	80030a0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	615a      	str	r2, [r3, #20]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400
 80030c4:	40014800 	.word	0x40014800

080030c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 0302 	bic.w	r3, r3, #2
 8003114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <TIM_OC1_SetConfig+0xfc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00b      	beq.n	8003140 <TIM_OC1_SetConfig+0x78>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <TIM_OC1_SetConfig+0x100>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <TIM_OC1_SetConfig+0x78>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <TIM_OC1_SetConfig+0x104>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC1_SetConfig+0x78>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <TIM_OC1_SetConfig+0x108>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10c      	bne.n	800315a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0308 	bic.w	r3, r3, #8
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <TIM_OC1_SetConfig+0xfc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_OC1_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <TIM_OC1_SetConfig+0x100>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_OC1_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <TIM_OC1_SetConfig+0x104>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_OC1_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <TIM_OC1_SetConfig+0x108>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d111      	bne.n	800319e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800

080031d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0210 	bic.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0320 	bic.w	r3, r3, #32
 8003222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a24      	ldr	r2, [pc, #144]	; (80032c4 <TIM_OC2_SetConfig+0xf0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10d      	bne.n	8003254 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <TIM_OC2_SetConfig+0xf0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00b      	beq.n	8003274 <TIM_OC2_SetConfig+0xa0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <TIM_OC2_SetConfig+0xf4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_OC2_SetConfig+0xa0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <TIM_OC2_SetConfig+0xf8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC2_SetConfig+0xa0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <TIM_OC2_SetConfig+0xfc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d113      	bne.n	800329c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003282:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800

080032d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <TIM_OC3_SetConfig+0xec>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10d      	bne.n	8003352 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003350:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <TIM_OC3_SetConfig+0xec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_OC3_SetConfig+0x9e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <TIM_OC3_SetConfig+0xf0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_OC3_SetConfig+0x9e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <TIM_OC3_SetConfig+0xf4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC3_SetConfig+0x9e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_OC3_SetConfig+0xf8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800

080033d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <TIM_OC4_SetConfig+0xb8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_OC4_SetConfig+0x7c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a15      	ldr	r2, [pc, #84]	; (800348c <TIM_OC4_SetConfig+0xbc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_OC4_SetConfig+0x7c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <TIM_OC4_SetConfig+0xc0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC4_SetConfig+0x7c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <TIM_OC4_SetConfig+0xc4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800

08003498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <TIM_OC5_SetConfig+0xac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_OC5_SetConfig+0x72>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <TIM_OC5_SetConfig+0xb0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_OC5_SetConfig+0x72>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <TIM_OC5_SetConfig+0xb4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC5_SetConfig+0x72>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a12      	ldr	r2, [pc, #72]	; (8003550 <TIM_OC5_SetConfig+0xb8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d109      	bne.n	800351e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40014000 	.word	0x40014000
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800

08003554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <TIM_OC6_SetConfig+0xb0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_OC6_SetConfig+0x74>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <TIM_OC6_SetConfig+0xb4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_OC6_SetConfig+0x74>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a14      	ldr	r2, [pc, #80]	; (800360c <TIM_OC6_SetConfig+0xb8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC6_SetConfig+0x74>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a13      	ldr	r2, [pc, #76]	; (8003610 <TIM_OC6_SetConfig+0xbc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d109      	bne.n	80035dc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e054      	b.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800365c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d009      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10c      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40014000 	.word	0x40014000

080036f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e040      	b.n	8003784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd f808 	bl	8000728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f82c 	bl	800378c <UART_SetConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e022      	b.n	8003784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f956 	bl	80039f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9dd 	bl	8003b3c <UART_CheckIdleState>
 8003782:	4603      	mov	r3, r0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8a      	ldr	r3, [pc, #552]	; (80039e0 <UART_SetConfig+0x254>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a78      	ldr	r2, [pc, #480]	; (80039e4 <UART_SetConfig+0x258>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d120      	bne.n	800384a <UART_SetConfig+0xbe>
 8003808:	4b77      	ldr	r3, [pc, #476]	; (80039e8 <UART_SetConfig+0x25c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d817      	bhi.n	8003844 <UART_SetConfig+0xb8>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <UART_SetConfig+0x90>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003839 	.word	0x08003839
 8003824:	0800383f 	.word	0x0800383f
 8003828:	08003833 	.word	0x08003833
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e01d      	b.n	800386e <UART_SetConfig+0xe2>
 8003832:	2302      	movs	r3, #2
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e01a      	b.n	800386e <UART_SetConfig+0xe2>
 8003838:	2304      	movs	r3, #4
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e017      	b.n	800386e <UART_SetConfig+0xe2>
 800383e:	2308      	movs	r3, #8
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e014      	b.n	800386e <UART_SetConfig+0xe2>
 8003844:	2310      	movs	r3, #16
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e011      	b.n	800386e <UART_SetConfig+0xe2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a67      	ldr	r2, [pc, #412]	; (80039ec <UART_SetConfig+0x260>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d102      	bne.n	800385a <UART_SetConfig+0xce>
 8003854:	2300      	movs	r3, #0
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e009      	b.n	800386e <UART_SetConfig+0xe2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a64      	ldr	r2, [pc, #400]	; (80039f0 <UART_SetConfig+0x264>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <UART_SetConfig+0xde>
 8003864:	2300      	movs	r3, #0
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e001      	b.n	800386e <UART_SetConfig+0xe2>
 800386a:	2310      	movs	r3, #16
 800386c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003876:	d15b      	bne.n	8003930 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003878:	7ffb      	ldrb	r3, [r7, #31]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d827      	bhi.n	80038ce <UART_SetConfig+0x142>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <UART_SetConfig+0xf8>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038b1 	.word	0x080038b1
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038cf 	.word	0x080038cf
 8003894:	080038bf 	.word	0x080038bf
 8003898:	080038cf 	.word	0x080038cf
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038cf 	.word	0x080038cf
 80038a4:	080038c7 	.word	0x080038c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7ff f8b0 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 80038ac:	61b8      	str	r0, [r7, #24]
        break;
 80038ae:	e013      	b.n	80038d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7ff f8ce 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <UART_SetConfig+0x268>)
 80038ba:	61bb      	str	r3, [r7, #24]
        break;
 80038bc:	e00c      	b.n	80038d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7ff f82f 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80038c2:	61b8      	str	r0, [r7, #24]
        break;
 80038c4:	e008      	b.n	80038d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e004      	b.n	80038d8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	77bb      	strb	r3, [r7, #30]
        break;
 80038d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d074      	beq.n	80039c8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	005a      	lsls	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	441a      	add	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d916      	bls.n	800392a <UART_SetConfig+0x19e>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d212      	bcs.n	800392a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f023 030f 	bic.w	r3, r3, #15
 800390c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	b29a      	uxth	r2, r3
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	4313      	orrs	r3, r2
 800391e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	89fa      	ldrh	r2, [r7, #14]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e04e      	b.n	80039c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77bb      	strb	r3, [r7, #30]
 800392e:	e04b      	b.n	80039c8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003930:	7ffb      	ldrb	r3, [r7, #31]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d827      	bhi.n	8003986 <UART_SetConfig+0x1fa>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0x1b0>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003961 	.word	0x08003961
 8003940:	08003969 	.word	0x08003969
 8003944:	08003971 	.word	0x08003971
 8003948:	08003987 	.word	0x08003987
 800394c:	08003977 	.word	0x08003977
 8003950:	08003987 	.word	0x08003987
 8003954:	08003987 	.word	0x08003987
 8003958:	08003987 	.word	0x08003987
 800395c:	0800397f 	.word	0x0800397f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff f854 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8003964:	61b8      	str	r0, [r7, #24]
        break;
 8003966:	e013      	b.n	8003990 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003968:	f7ff f872 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e00f      	b.n	8003990 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <UART_SetConfig+0x268>)
 8003972:	61bb      	str	r3, [r7, #24]
        break;
 8003974:	e00c      	b.n	8003990 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003976:	f7fe ffd3 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800397a:	61b8      	str	r0, [r7, #24]
        break;
 800397c:	e008      	b.n	8003990 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003982:	61bb      	str	r3, [r7, #24]
        break;
 8003984:	e004      	b.n	8003990 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	77bb      	strb	r3, [r7, #30]
        break;
 800398e:	bf00      	nop
    }

    if (pclk != 0U)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	085a      	lsrs	r2, r3, #1
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	d908      	bls.n	80039c4 <UART_SetConfig+0x238>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d204      	bcs.n	80039c4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	e001      	b.n	80039c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	efff69f3 	.word	0xefff69f3
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40004400 	.word	0x40004400
 80039f0:	40004800 	.word	0x40004800
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01a      	beq.n	8003b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af6:	d10a      	bne.n	8003b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b4c:	f7fc fef0 	bl	8000930 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d10e      	bne.n	8003b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f82d 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e023      	b.n	8003bc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d10e      	bne.n	8003baa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f817 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00d      	b.n	8003bc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b09c      	sub	sp, #112	; 0x70
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	e0a5      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be6:	f000 80a1 	beq.w	8003d2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fc fea1 	bl	8000930 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d13e      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e6      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	663b      	str	r3, [r7, #96]	; 0x60
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c52:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e067      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d04f      	beq.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d147      	bne.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cf8:	623a      	str	r2, [r7, #32]
 8003cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	69f9      	ldr	r1, [r7, #28]
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e010      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	f43f af4a 	beq.w	8003be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3770      	adds	r7, #112	; 0x70
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <__libc_init_array>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	4d0d      	ldr	r5, [pc, #52]	; (8003d90 <__libc_init_array+0x38>)
 8003d5c:	4c0d      	ldr	r4, [pc, #52]	; (8003d94 <__libc_init_array+0x3c>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	2600      	movs	r6, #0
 8003d64:	42a6      	cmp	r6, r4
 8003d66:	d109      	bne.n	8003d7c <__libc_init_array+0x24>
 8003d68:	4d0b      	ldr	r5, [pc, #44]	; (8003d98 <__libc_init_array+0x40>)
 8003d6a:	4c0c      	ldr	r4, [pc, #48]	; (8003d9c <__libc_init_array+0x44>)
 8003d6c:	f000 f820 	bl	8003db0 <_init>
 8003d70:	1b64      	subs	r4, r4, r5
 8003d72:	10a4      	asrs	r4, r4, #2
 8003d74:	2600      	movs	r6, #0
 8003d76:	42a6      	cmp	r6, r4
 8003d78:	d105      	bne.n	8003d86 <__libc_init_array+0x2e>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d80:	4798      	blx	r3
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7ee      	b.n	8003d64 <__libc_init_array+0xc>
 8003d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8a:	4798      	blx	r3
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	e7f2      	b.n	8003d76 <__libc_init_array+0x1e>
 8003d90:	08003e00 	.word	0x08003e00
 8003d94:	08003e00 	.word	0x08003e00
 8003d98:	08003e00 	.word	0x08003e00
 8003d9c:	08003e04 	.word	0x08003e04

08003da0 <memset>:
 8003da0:	4402      	add	r2, r0
 8003da2:	4603      	mov	r3, r0
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d100      	bne.n	8003daa <memset+0xa>
 8003da8:	4770      	bx	lr
 8003daa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dae:	e7f9      	b.n	8003da4 <memset+0x4>

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
