
stm32f334k8t6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee0  08005ee0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee0  08005ee0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000210  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014602  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029bf  00000000  00000000  0003463e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00037000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e60  00000000  00000000  00037f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021835  00000000  00000000  00038dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e44  00000000  00000000  0005a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca953  00000000  00000000  0006e441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138d94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040bc  00000000  00000000  00138de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e90 	.word	0x08005e90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e90 	.word	0x08005e90

080001c8 <bizon_init>:
#include "bizon.h"

void bizon_init(Bizon *bizon, float max_speed) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	ed87 0a00 	vstr	s0, [r7]
	bizon_set_max_speed(bizon, max_speed);
 80001d4:	ed97 0a00 	vldr	s0, [r7]
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f000 f877 	bl	80002cc <bizon_set_max_speed>

	bizon_pin_init(&bizon->mb1, U3_IN1_GPIO_Port, U3_IN1_Pin);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80001e4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f89f 	bl	800032c <bizon_pin_init>
	bizon_pin_init(&bizon->mb2, U3_IN2_GPIO_Port, U3_IN2_Pin);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3308      	adds	r3, #8
 80001f2:	2208      	movs	r2, #8
 80001f4:	4917      	ldr	r1, [pc, #92]	; (8000254 <bizon_init+0x8c>)
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f898 	bl	800032c <bizon_pin_init>
	motor_pololu_init(&bizon->motor_left, &bizon->mb1, &bizon->mb2, &TIM3->CCR1);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f103 0020 	add.w	r0, r3, #32
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <bizon_init+0x90>)
 800020c:	f000 fc0f 	bl	8000a2e <motor_pololu_init>

	bizon_pin_init(&bizon->ma1, U1_IN1_GPIO_Port, U1_IN1_Pin);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3310      	adds	r3, #16
 8000214:	2240      	movs	r2, #64	; 0x40
 8000216:	490f      	ldr	r1, [pc, #60]	; (8000254 <bizon_init+0x8c>)
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f887 	bl	800032c <bizon_pin_init>
	bizon_pin_init(&bizon->ma2, U1_IN2_GPIO_Port, U1_IN2_Pin);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	3318      	adds	r3, #24
 8000222:	2280      	movs	r2, #128	; 0x80
 8000224:	490b      	ldr	r1, [pc, #44]	; (8000254 <bizon_init+0x8c>)
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f880 	bl	800032c <bizon_pin_init>
	motor_pololu_init(&bizon->motor_right ,&bizon->ma1, &bizon->ma2, &TIM3->CCR2);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f103 0110 	add.w	r1, r3, #16
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f103 0218 	add.w	r2, r3, #24
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <bizon_init+0x94>)
 8000240:	f000 fbf5 	bl	8000a2e <motor_pololu_init>
	bizon->esc_speed = &TIM2->CCR1;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <bizon_init+0x98>)
 8000248:	639a      	str	r2, [r3, #56]	; 0x38
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	48000400 	.word	0x48000400
 8000258:	40000434 	.word	0x40000434
 800025c:	40000438 	.word	0x40000438
 8000260:	40000034 	.word	0x40000034

08000264 <bizon_drive>:

void bizon_drive(Bizon *bizon, float forward, float rotation) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000270:	edc7 0a01 	vstr	s1, [r7, #4]
	float left = (forward + rotation) * bizon->max_speed;
 8000274:	ed97 7a02 	vldr	s14, [r7, #8]
 8000278:	edd7 7a01 	vldr	s15, [r7, #4]
 800027c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800028a:	edc7 7a05 	vstr	s15, [r7, #20]
	float right = (forward - rotation) * bizon->max_speed;
 800028e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000292:	edd7 7a01 	vldr	s15, [r7, #4]
 8000296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80002a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002a4:	edc7 7a04 	vstr	s15, [r7, #16]
	motor_pololu_set_speed(&bizon->motor_left, left);
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3320      	adds	r3, #32
 80002ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fbd3 	bl	8000a5c <motor_pololu_set_speed>
	motor_pololu_set_speed(&bizon->motor_right, right);
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	332c      	adds	r3, #44	; 0x2c
 80002ba:	ed97 0a04 	vldr	s0, [r7, #16]
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fbcc 	bl	8000a5c <motor_pololu_set_speed>
}
 80002c4:	bf00      	nop
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <bizon_set_max_speed>:

void bizon_set_max_speed(Bizon *bizon, float max_speed) {
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	ed87 0a00 	vstr	s0, [r7]
	bizon->max_speed = max_speed;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	683a      	ldr	r2, [r7, #0]
 80002dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
	...

080002ec <bizon_set_esc_speed>:

void bizon_set_esc_speed(Bizon *bizon, float esc_speed) {
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	ed87 0a00 	vstr	s0, [r7]
	*bizon->esc_speed = 1000+ esc_speed * 1000;
 80002f8:	edd7 7a00 	vldr	s15, [r7]
 80002fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000328 <bizon_set_esc_speed+0x3c>
 8000300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000304:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000328 <bizon_set_esc_speed+0x3c>
 8000308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000314:	ee17 2a90 	vmov	r2, s15
 8000318:	601a      	str	r2, [r3, #0]
//	TIM2->CCR1 = 2000;

}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	447a0000 	.word	0x447a0000

0800032c <bizon_pin_init>:



#include "bizon_pin.h"

bizon_pin_init(BizonPin *bizon_pin, GPIO_TypeDef* port, uint32_t pin){
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
	bizon_pin->pin = pin;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	605a      	str	r2, [r3, #4]
	bizon_pin->port = port;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <bizon_pin_set_high>:

void bizon_pin_set_high(BizonPin *bizon_pin){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bizon_pin->port, bizon_pin->pin, GPIO_PIN_SET);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	b29b      	uxth	r3, r3
 8000362:	2201      	movs	r2, #1
 8000364:	4619      	mov	r1, r3
 8000366:	f002 f9b5 	bl	80026d4 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <bizon_pin_set_low>:
void bizon_pin_set_low(BizonPin *bizon_pin){
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bizon_pin->port, bizon_pin->pin, GPIO_PIN_RESET);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6818      	ldr	r0, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	b29b      	uxth	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	f002 f9a4 	bl	80026d4 <HAL_GPIO_WritePin>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <bizon_pin_toggle>:
void bizon_pin_toggle(BizonPin *bizon_pin){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(bizon_pin->port, bizon_pin->pin);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	4619      	mov	r1, r3
 80003a8:	4610      	mov	r0, r2
 80003aa:	f002 f9ab 	bl	8002704 <HAL_GPIO_TogglePin>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b098      	sub	sp, #96	; 0x60
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003be:	f000 ffb3 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f8b3 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 fa9b 	bl	8000900 <MX_GPIO_Init>
  MX_ADC2_Init();
 80003ca:	f000 f909 	bl	80005e0 <MX_ADC2_Init>
  MX_DMA_Init();
 80003ce:	f000 fa79 	bl	80008c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003d2:	f000 fa3f 	bl	8000854 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80003d6:	f000 f9bb 	bl	8000750 <MX_TIM3_Init>
  MX_TIM2_Init();
 80003da:	f000 f95f 	bl	800069c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	BizonPin led1;
	BizonPin led2;
	BizonPin led3;
	bizon_pin_init(&led1, LED1_GPIO_Port, LED1_Pin);
 80003de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff9f 	bl	800032c <bizon_pin_init>
	bizon_pin_init(&led2, LED2_GPIO_Port, LED2_Pin);
 80003ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003f2:	2201      	movs	r2, #1
 80003f4:	4946      	ldr	r1, [pc, #280]	; (8000510 <main+0x158>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff98 	bl	800032c <bizon_pin_init>
	bizon_pin_init(&led3, LED3_GPIO_Port, LED3_Pin);
 80003fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000400:	2202      	movs	r2, #2
 8000402:	4943      	ldr	r1, [pc, #268]	; (8000510 <main+0x158>)
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff91 	bl	800032c <bizon_pin_init>
	;
	for(int i = 0; i< 6;++i){
 800040a:	2300      	movs	r3, #0
 800040c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800040e:	e015      	b.n	800043c <main+0x84>
		bizon_pin_toggle(&led1);
 8000410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffbd 	bl	8000394 <bizon_pin_toggle>
			bizon_pin_toggle(&led2);
 800041a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ffb8 	bl	8000394 <bizon_pin_toggle>
			bizon_pin_toggle(&led3);
 8000424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ffb3 	bl	8000394 <bizon_pin_toggle>
		HAL_Delay(500);
 800042e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000432:	f000 ffdf 	bl	80013f4 <HAL_Delay>
	for(int i = 0; i< 6;++i){
 8000436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000438:	3301      	adds	r3, #1
 800043a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800043c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800043e:	2b05      	cmp	r3, #5
 8000440:	dde6      	ble.n	8000410 <main+0x58>
	}

	Bizon bizon;
	bizon_init(&bizon, 1.0);
 8000442:	463b      	mov	r3, r7
 8000444:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff febd 	bl	80001c8 <bizon_init>
	SSL482_Init(&ssl, &huart2);
 800044e:	4931      	ldr	r1, [pc, #196]	; (8000514 <main+0x15c>)
 8000450:	4831      	ldr	r0, [pc, #196]	; (8000518 <main+0x160>)
 8000452:	f000 fb57 	bl	8000b04 <SSL482_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000456:	2100      	movs	r1, #0
 8000458:	4830      	ldr	r0, [pc, #192]	; (800051c <main+0x164>)
 800045a:	f003 fc8f 	bl	8003d7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800045e:	2104      	movs	r1, #4
 8000460:	482e      	ldr	r0, [pc, #184]	; (800051c <main+0x164>)
 8000462:	f003 fc8b 	bl	8003d7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000466:	2100      	movs	r1, #0
 8000468:	482d      	ldr	r0, [pc, #180]	; (8000520 <main+0x168>)
 800046a:	f003 fc87 	bl	8003d7c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t safety_tick = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  while (1)
  {

	  if(SSL482_GetStatus(&ssl) == SSL482_OK){
 8000474:	4828      	ldr	r0, [pc, #160]	; (8000518 <main+0x160>)
 8000476:	f000 fc0e 	bl	8000c96 <SSL482_GetStatus>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d118      	bne.n	80004b2 <main+0xfa>
		  bizon_pin_toggle(&led3);
 8000480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff85 	bl	8000394 <bizon_pin_toggle>
		  bizon_pin_set_low(&led1);
 800048a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff6f 	bl	8000372 <bizon_pin_set_low>
		  bizon_drive(&bizon, ssl.throttle, ssl.steering);
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <main+0x160>)
 8000496:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <main+0x160>)
 800049c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80004a0:	463b      	mov	r3, r7
 80004a2:	eef0 0a47 	vmov.f32	s1, s14
 80004a6:	eeb0 0a67 	vmov.f32	s0, s15
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff feda 	bl	8000264 <bizon_drive>
 80004b0:	e011      	b.n	80004d6 <main+0x11e>
	  }
	  else{
		  bizon_pin_toggle(&led1);
 80004b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff6c 	bl	8000394 <bizon_pin_toggle>
		  bizon_pin_set_low(&led3);
 80004bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff56 	bl	8000372 <bizon_pin_set_low>
		  bizon_drive(&bizon, 0.0, 0.0);
 80004c6:	463b      	mov	r3, r7
 80004c8:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000524 <main+0x16c>
 80004cc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000524 <main+0x16c>
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fec7 	bl	8000264 <bizon_drive>
	  }

	  if(ssl.aux1 == SSL482_SW1_PRESSED){
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <main+0x160>)
 80004d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80004da:	f240 1257 	movw	r2, #343	; 0x157
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <main+0x138>
		  bizon_set_esc_speed(&bizon, 0.05);
 80004e2:	463b      	mov	r3, r7
 80004e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000528 <main+0x170>
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff feff 	bl	80002ec <bizon_set_esc_speed>
 80004ee:	e005      	b.n	80004fc <main+0x144>
	  }
	  else{
		  bizon_set_esc_speed(&bizon, 0.0);
 80004f0:	463b      	mov	r3, r7
 80004f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000524 <main+0x16c>
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fef8 	bl	80002ec <bizon_set_esc_speed>
	  }
	  HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 ff79 	bl	80013f4 <HAL_Delay>
	  ++safety_tick;
 8000502:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000506:	3301      	adds	r3, #1
 8000508:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  if(SSL482_GetStatus(&ssl) == SSL482_OK){
 800050c:	e7b2      	b.n	8000474 <main+0xbc>
 800050e:	bf00      	nop
 8000510:	48000400 	.word	0x48000400
 8000514:	20000194 	.word	0x20000194
 8000518:	20000108 	.word	0x20000108
 800051c:	200000bc 	.word	0x200000bc
 8000520:	20000148 	.word	0x20000148
 8000524:	00000000 	.word	0x00000000
 8000528:	3d4ccccd 	.word	0x3d4ccccd

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f005 fc4e 	bl	8005ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2300      	movs	r3, #0
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000576:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800057a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000580:	4618      	mov	r0, r3
 8000582:	f002 f8d9 	bl	8002738 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800058c:	f000 fa4a 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2102      	movs	r1, #2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 ffcb 	bl	8003548 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005b8:	f000 fa34 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f9f3 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005d4:	f000 fa26 	bl	8000a24 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3758      	adds	r7, #88	; 0x58
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC2_Init+0xb4>)
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <MX_ADC2_Init+0xb8>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_ADC2_Init+0xb4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC2_Init+0xb4>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000610:	2200      	movs	r2, #0
 8000612:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC2_Init+0xb4>)
 800061e:	2200      	movs	r2, #0
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000624:	2201      	movs	r2, #1
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC2_Init+0xb4>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000630:	2201      	movs	r2, #1
 8000632:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC2_Init+0xb4>)
 800063e:	2204      	movs	r2, #4
 8000640:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC2_Init+0xb4>)
 800064a:	2200      	movs	r2, #0
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <MX_ADC2_Init+0xb4>)
 8000650:	f000 fef4 	bl	800143c <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800065a:	f000 f9e3 	bl	8000a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800065e:	2301      	movs	r3, #1
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000662:	2301      	movs	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_ADC2_Init+0xb4>)
 800067c:	f001 f870 	bl	8001760 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000686:	f000 f9cd 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000006c 	.word	0x2000006c
 8000698:	50000100 	.word	0x50000100

0800069c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_TIM2_Init+0xb0>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_TIM2_Init+0xb0>)
 80006ca:	223f      	movs	r2, #63	; 0x3f
 80006cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_TIM2_Init+0xb0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_TIM2_Init+0xb0>)
 80006d6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_TIM2_Init+0xb0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_TIM2_Init+0xb0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e8:	4818      	ldr	r0, [pc, #96]	; (800074c <MX_TIM2_Init+0xb0>)
 80006ea:	f003 faf0 	bl	8003cce <HAL_TIM_PWM_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f996 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_TIM2_Init+0xb0>)
 8000708:	f004 f9e0 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000712:	f000 f987 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000716:	2360      	movs	r3, #96	; 0x60
 8000718:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <MX_TIM2_Init+0xb0>)
 800072e:	f003 fc11 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000738:	f000 f974 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <MX_TIM2_Init+0xb0>)
 800073e:	f000 fcab 	bl	8001098 <HAL_TIM_MspPostInit>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000148 	.word	0x20000148

08000750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	; 0x38
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <MX_TIM3_Init+0xfc>)
 8000784:	4a32      	ldr	r2, [pc, #200]	; (8000850 <MX_TIM3_Init+0x100>)
 8000786:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_TIM3_Init+0xfc>)
 800078a:	2201      	movs	r2, #1
 800078c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_TIM3_Init+0xfc>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_TIM3_Init+0xfc>)
 8000796:	2263      	movs	r2, #99	; 0x63
 8000798:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_TIM3_Init+0xfc>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_TIM3_Init+0xfc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a6:	4829      	ldr	r0, [pc, #164]	; (800084c <MX_TIM3_Init+0xfc>)
 80007a8:	f003 fa3a 	bl	8003c20 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007b2:	f000 f937 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4822      	ldr	r0, [pc, #136]	; (800084c <MX_TIM3_Init+0xfc>)
 80007c4:	f003 fcda 	bl	800417c <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007ce:	f000 f929 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_TIM3_Init+0xfc>)
 80007d4:	f003 fa7b 	bl	8003cce <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007de:	f000 f921 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_TIM3_Init+0xfc>)
 80007f2:	f004 f96b 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007fc:	f000 f912 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_TIM3_Init+0xfc>)
 8000818:	f003 fb9c 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000822:	f000 f8ff 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2204      	movs	r2, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM3_Init+0xfc>)
 800082e:	f003 fb91 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000838:	f000 f8f4 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM3_Init+0xfc>)
 800083e:	f000 fc2b 	bl	8001098 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3738      	adds	r7, #56	; 0x38
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000bc 	.word	0x200000bc
 8000850:	40000400 	.word	0x40000400

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_USART2_UART_Init+0x68>)
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <MX_USART2_UART_Init+0x6c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART2_UART_Init+0x68>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_USART2_UART_Init+0x68>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART2_UART_Init+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART2_UART_Init+0x68>)
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_USART2_UART_Init+0x68>)
 80008a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART2_UART_Init+0x68>)
 80008a8:	f004 f97e 	bl	8004ba8 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80008b2:	f000 f8b7 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000194 	.word	0x20000194
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_DMA_Init+0x38>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <MX_DMA_Init+0x38>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_DMA_Init+0x38>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2010      	movs	r0, #16
 80008e8:	f001 fb3d 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008ec:	2010      	movs	r0, #16
 80008ee:	f001 fb56 	bl	8001f9e <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a35      	ldr	r2, [pc, #212]	; (80009f0 <MX_GPIO_Init+0xf0>)
 800091c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0xf0>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <MX_GPIO_Init+0xf0>)
 800094c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_GPIO_Init+0xf0>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|U3_IN1_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f248 0180 	movw	r1, #32896	; 0x8080
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 feb4 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|U3_IN2_Pin|U1_IN1_Pin
 800096c:	2200      	movs	r2, #0
 800096e:	21cb      	movs	r1, #203	; 0xcb
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <MX_GPIO_Init+0xf4>)
 8000972:	f001 feaf 	bl	80026d4 <HAL_GPIO_WritePin>
                          |U1_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000976:	2303      	movs	r3, #3
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	481b      	ldr	r0, [pc, #108]	; (80009f8 <MX_GPIO_Init+0xf8>)
 800098a:	f001 fd31 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : J9_GPIO_Pin J11_GPIO_Pin */
  GPIO_InitStruct.Pin = J9_GPIO_Pin|J11_GPIO_Pin;
 800098e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f001 fd23 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin U3_IN1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|U3_IN1_Pin;
 80009aa:	f248 0380 	movw	r3, #32896	; 0x8080
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f001 fd13 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin U3_IN2_Pin U1_IN1_Pin
                           U1_IN2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|U3_IN2_Pin|U1_IN1_Pin
 80009ca:	23cb      	movs	r3, #203	; 0xcb
 80009cc:	60fb      	str	r3, [r7, #12]
                          |U1_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xf4>)
 80009e2:	f001 fd05 	bl	80023f0 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400
 80009f8:	48001400 	.word	0x48001400

080009fc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
/**
 * @breif Overload HAL callback for UART.
 * @param huart Handle for HAL UART structure
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if(huart->Instance==ssl.huart->Instance) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_UART_RxCpltCallback+0x24>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d102      	bne.n	8000a18 <HAL_UART_RxCpltCallback+0x1c>
		SSL482_OnRecive(&ssl);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <HAL_UART_RxCpltCallback+0x24>)
 8000a14:	f000 f89f 	bl	8000b56 <SSL482_OnRecive>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000108 	.word	0x20000108

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>

08000a2e <motor_pololu_init>:
#include "motor_pololu.h"

void motor_pololu_init(MotorPololu *motor_pololu, BizonPin *in1_pin, BizonPin *in2_pin,	uint32_t *fill_pwm) {
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
	motor_pololu->in1_pin = in1_pin;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	601a      	str	r2, [r3, #0]
	motor_pololu->in2_pin = in2_pin;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	605a      	str	r2, [r3, #4]
	motor_pololu->fill_pwm = fill_pwm;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	609a      	str	r2, [r3, #8]
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <motor_pololu_set_speed>:
void motor_pololu_set_speed(MotorPololu *motor_pololu, float fill){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	ed87 0a02 	vstr	s0, [r7, #8]
	if (fill>= 0.0) {
 8000a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a74:	db03      	blt.n	8000a7e <motor_pololu_set_speed+0x22>
		motor_pololu_go_forward(motor_pololu);
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f820 	bl	8000abc <motor_pololu_go_forward>
 8000a7c:	e008      	b.n	8000a90 <motor_pololu_set_speed+0x34>
	} else {
		motor_pololu_go_backward(motor_pololu);
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 f82e 	bl	8000ae0 <motor_pololu_go_backward>
		fill *= -1;
 8000a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a88:	eef1 7a67 	vneg.f32	s15, s15
 8000a8c:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	uint8_t cos = fill * 100;
 8000a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a94:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ab8 <motor_pololu_set_speed+0x5c>
 8000a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aa4:	793b      	ldrb	r3, [r7, #4]
 8000aa6:	75fb      	strb	r3, [r7, #23]
	*motor_pololu->fill_pwm = cos ;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	7dfa      	ldrb	r2, [r7, #23]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	42c80000 	.word	0x42c80000

08000abc <motor_pololu_go_forward>:
void motor_pololu_go_forward(MotorPololu *motor_pololu) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	bizon_pin_set_high(motor_pololu->in1_pin);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc41 	bl	8000350 <bizon_pin_set_high>
	bizon_pin_set_low(motor_pololu->in2_pin);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fc4d 	bl	8000372 <bizon_pin_set_low>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <motor_pololu_go_backward>:
void motor_pololu_go_backward(MotorPololu *motor_pololu) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	bizon_pin_set_high(motor_pololu->in2_pin);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fc2f 	bl	8000350 <bizon_pin_set_high>
	bizon_pin_set_low(motor_pololu->in1_pin);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc3b 	bl	8000372 <bizon_pin_set_low>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SSL482_Init>:
 * @brief Initialization of RC struct.
 * @details Must be call at the begin of the program.
 * @param rc pointer to target board
 * @param huart pointer to UART HAL handle, that will be in use
 * */
void SSL482_Init(SSL482_StructTypeDef *rc, UART_HandleTypeDef *huart) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	rc->huart = huart;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	601a      	str	r2, [r3, #0]
	rc->dataTimestamp = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
	rc->status = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	rc->steering = 0;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
	rc->throttle = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38
	rc->aux1 = SSL482_SW1_UNKNOW;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	879a      	strh	r2, [r3, #60]	; 0x3c
	rc->aux2 = SSL482_SW3_UNKNOW;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	87da      	strh	r2, [r3, #62]	; 0x3e

	// start DMA receiver
	HAL_UART_Receive_DMA(rc->huart, rc->bufferRead, SSL482_BUFFER_READ_LEN);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2214      	movs	r2, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f004 f87b 	bl	8004c44 <HAL_UART_Receive_DMA>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SSL482_OnRecive>:
/**
 * @brief ReadBuffer full callback.
 * @details Made for call in HAL_UART_RxCpltCallback() interrupt callback.
 * @param rc pointer to target receiver
 * */
void SSL482_OnRecive(SSL482_StructTypeDef *rc) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	rc->status = SSL482_OK;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	uint8_t loop = SSL482_BUFFER_READ_LEN - SSL482_BUFFER_FRAME_LEN;
 8000b66:	230a      	movs	r3, #10
 8000b68:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73bb      	strb	r3, [r7, #14]

	// search for valid frame in read buffer
	memcpy(rc->bufferFrame, rc->bufferRead, SSL482_BUFFER_FRAME_LEN);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0018 	add.w	r0, r3, #24
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3304      	adds	r3, #4
 8000b78:	220a      	movs	r2, #10
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f005 f920 	bl	8005dc0 <memcpy>

	while(!__SSL482_GetFrameCheckum(rc->bufferFrame) && loop--) {
 8000b80:	e00d      	b.n	8000b9e <SSL482_OnRecive+0x48>
		index++;
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	3301      	adds	r3, #1
 8000b86:	73bb      	strb	r3, [r7, #14]
		memcpy(rc->bufferFrame, rc->bufferRead + index, SSL482_BUFFER_FRAME_LEN);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f103 0018 	add.w	r0, r3, #24
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1d1a      	adds	r2, r3, #4
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	4413      	add	r3, r2
 8000b96:	220a      	movs	r2, #10
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f005 f911 	bl	8005dc0 <memcpy>
	while(!__SSL482_GetFrameCheckum(rc->bufferFrame) && loop--) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3318      	adds	r3, #24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f9b3 	bl	8000f0e <__SSL482_GetFrameCheckum>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <SSL482_OnRecive+0x62>
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	73fa      	strb	r2, [r7, #15]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e4      	bne.n	8000b82 <SSL482_OnRecive+0x2c>
	}

	// restart DMA receiver
	HAL_UART_Receive_DMA(rc->huart, rc->bufferRead, SSL482_BUFFER_READ_LEN);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	2214      	movs	r2, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f004 f83e 	bl	8004c44 <HAL_UART_Receive_DMA>

	// can't find any valid frame (transmission error)
	if(loop==0) {
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <SSL482_OnRecive+0x82>
		rc->status = SSL482_TRANSMISSION_ERROR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		return;
 8000bd6:	e05b      	b.n	8000c90 <SSL482_OnRecive+0x13a>
	}

	// read raw data from frame and save time
	rc->dataRaw[0] = (rc->bufferFrame[1] << 8) + rc->bufferFrame[2];
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7e5b      	ldrb	r3, [r3, #25]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7e9b      	ldrb	r3, [r3, #26]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	845a      	strh	r2, [r3, #34]	; 0x22
	rc->dataRaw[1] = (rc->bufferFrame[3] << 8) + rc->bufferFrame[4];
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7edb      	ldrb	r3, [r3, #27]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7f1b      	ldrb	r3, [r3, #28]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	849a      	strh	r2, [r3, #36]	; 0x24
	rc->dataRaw[2] = (rc->bufferFrame[5] << 8) + rc->bufferFrame[6];
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7f5b      	ldrb	r3, [r3, #29]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7f9b      	ldrb	r3, [r3, #30]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	84da      	strh	r2, [r3, #38]	; 0x26
	rc->dataRaw[3] = (rc->bufferFrame[7] << 8) + rc->bufferFrame[8];
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7fdb      	ldrb	r3, [r3, #31]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	851a      	strh	r2, [r3, #40]	; 0x28
	rc->dataTimestamp = HAL_GetTick();
 8000c3a:	f000 fbcf 	bl	80013dc <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c

	// format data to useful form
	rc->steering = __SSL482_GetProcessedSteering(rc->dataRaw[0]);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f8c1 	bl	8000dd0 <__SSL482_GetProcessedSteering>
 8000c4e:	eef0 7a40 	vmov.f32	s15, s0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	rc->throttle = __SSL482_GetProcessedThrottle(rc->dataRaw[1]);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f84d 	bl	8000cfc <__SSL482_GetProcessedThrottle>
 8000c62:	eef0 7a40 	vmov.f32	s15, s0
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	rc->aux1 = __SSL482_GetProcessedAUX1(rc->dataRaw[2]);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f917 	bl	8000ea4 <__SSL482_GetProcessedAUX1>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	879a      	strh	r2, [r3, #60]	; 0x3c
	rc->aux2 = __SSL482_GetProcessedAUX2(rc->dataRaw[3]);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f925 	bl	8000ed2 <__SSL482_GetProcessedAUX2>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <SSL482_GetStatus>:
 * @brief Get connection status.
 * @note This function should be called periodically for up-to-date status field.
 * @param rc pointer to target receiver
 * @return status byte, each bit corresponds to other issue
 * */
SSL482Error_EnumTypeDef SSL482_GetStatus(SSL482_StructTypeDef *rc) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]

	if((HAL_GetTick() - rc->dataTimestamp)>SSL482_MESSAGE_TIMEOUT)
 8000c9e:	f000 fb9d 	bl	80013dc <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2bc8      	cmp	r3, #200	; 0xc8
 8000cac:	d904      	bls.n	8000cb8 <SSL482_GetStatus+0x22>
		rc->status = SSL482_TRANSMISSION_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000cb6:	e019      	b.n	8000cec <SSL482_GetStatus+0x56>
	else if(rc->status>0)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <SSL482_GetStatus+0x36>
		rc->status = SSL482_TRANSMISSION_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000cca:	e00f      	b.n	8000cec <SSL482_GetStatus+0x56>
	else if(rc->dataRaw[0]>SSL482_STEERING_CUTOFF || rc->dataRaw[1]>SSL482_THROTTLE_CUTOFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000cd0:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d805      	bhi.n	8000ce4 <SSL482_GetStatus+0x4e>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cdc:	f240 6272 	movw	r2, #1650	; 0x672
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d903      	bls.n	8000cec <SSL482_GetStatus+0x56>
		rc->status = SSL482_VALUE_OUT_OF_RANGE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	return rc->status;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <__SSL482_GetProcessedThrottle>:
 * @brief Format throttle value to usable form.
 * @detail inactive zone around neutral value is considered
 * @param throttleRaw raw steering value
 * @return floating point value from range [-1; 1]
 * */
float __SSL482_GetProcessedThrottle(uint16_t throttleRaw) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
	if(throttleRaw==0 || throttleRaw>SSL482_THROTTLE_CUTOFF)
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <__SSL482_GetProcessedThrottle+0x1a>
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	f240 6272 	movw	r2, #1650	; 0x672
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d902      	bls.n	8000d1c <__SSL482_GetProcessedThrottle+0x20>
		return 0;
 8000d16:	eddf 7a28 	vldr	s15, [pc, #160]	; 8000db8 <__SSL482_GetProcessedThrottle+0xbc>
 8000d1a:	e048      	b.n	8000dae <__SSL482_GetProcessedThrottle+0xb2>

	float raw = (float)throttleRaw - SSL482_THROTTLE_NEUTRAL_VALUE;
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000dbc <__SSL482_GetProcessedThrottle+0xc0>
 8000d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d2e:	edc7 7a02 	vstr	s15, [r7, #8]
	float result = 0;
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]

	if(raw>SSL482_THROTTLE_NEUTRAL_RADIUS)
 8000d38:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d3c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000dc0 <__SSL482_GetProcessedThrottle+0xc4>
 8000d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	dd0c      	ble.n	8000d64 <__SSL482_GetProcessedThrottle+0x68>
		result = (raw - SSL482_THROTTLE_NEUTRAL_RADIUS)/(SSL482_THROTTLE_MAX_VALUE - SSL482_THROTTLE_NEUTRAL_VALUE - SSL482_THROTTLE_NEUTRAL_RADIUS);
 8000d4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d4e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000dc0 <__SSL482_GetProcessedThrottle+0xc4>
 8000d52:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000d56:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000dc4 <__SSL482_GetProcessedThrottle+0xc8>
 8000d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d5e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000d62:	e014      	b.n	8000d8e <__SSL482_GetProcessedThrottle+0x92>
	else if(raw<-SSL482_THROTTLE_NEUTRAL_RADIUS)
 8000d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d68:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000dc8 <__SSL482_GetProcessedThrottle+0xcc>
 8000d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d74:	d50b      	bpl.n	8000d8e <__SSL482_GetProcessedThrottle+0x92>
		result = -(raw + SSL482_THROTTLE_NEUTRAL_RADIUS)/(SSL482_THROTTLE_MIN_VALUE - SSL482_THROTTLE_NEUTRAL_VALUE + SSL482_THROTTLE_NEUTRAL_RADIUS);
 8000d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d7a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000dc0 <__SSL482_GetProcessedThrottle+0xc4>
 8000d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d82:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000dcc <__SSL482_GetProcessedThrottle+0xd0>
 8000d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8a:	edc7 7a03 	vstr	s15, [r7, #12]

	return fminf(fmaxf(result, -1), 1);
 8000d8e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8000d92:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d96:	f005 f829 	bl	8005dec <fmaxf>
 8000d9a:	eef0 7a40 	vmov.f32	s15, s0
 8000d9e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000da2:	eeb0 0a67 	vmov.f32	s0, s15
 8000da6:	f005 f83c 	bl	8005e22 <fminf>
 8000daa:	eef0 7a40 	vmov.f32	s15, s0
}
 8000dae:	eeb0 0a67 	vmov.f32	s0, s15
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	443b4000 	.word	0x443b4000
 8000dc0:	42480000 	.word	0x42480000
 8000dc4:	44428000 	.word	0x44428000
 8000dc8:	c2480000 	.word	0xc2480000
 8000dcc:	43db0000 	.word	0x43db0000

08000dd0 <__SSL482_GetProcessedSteering>:
 * @brief Format steering value to usable form.
 * @detail inactive zone around neutral value is considered
 * @param steeringRaw raw steering value
 * @return floating point value from range [-1; 1]
 * */
float __SSL482_GetProcessedSteering(uint16_t steeringRaw) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
	if(steeringRaw==0 || steeringRaw>SSL482_STEERING_CUTOFF)
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d004      	beq.n	8000dea <__SSL482_GetProcessedSteering+0x1a>
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d902      	bls.n	8000df0 <__SSL482_GetProcessedSteering+0x20>
		return 0;
 8000dea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8000e8c <__SSL482_GetProcessedSteering+0xbc>
 8000dee:	e048      	b.n	8000e82 <__SSL482_GetProcessedSteering+0xb2>

	float raw = (float)steeringRaw - SSL482_STEERING_NEUTRAL_VALUE;
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dfa:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000e90 <__SSL482_GetProcessedSteering+0xc0>
 8000dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e02:	edc7 7a02 	vstr	s15, [r7, #8]
	float result = 0;
 8000e06:	f04f 0300 	mov.w	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]

	if(raw>SSL482_STEERING_NEUTRAL_RADIUS)
 8000e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e10:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000e94 <__SSL482_GetProcessedSteering+0xc4>
 8000e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1c:	dd0c      	ble.n	8000e38 <__SSL482_GetProcessedSteering+0x68>
		result =  (raw - SSL482_STEERING_NEUTRAL_RADIUS)/(SSL482_STEERING_MAX_VALUE - SSL482_STEERING_NEUTRAL_VALUE - SSL482_STEERING_NEUTRAL_RADIUS);
 8000e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e22:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000e94 <__SSL482_GetProcessedSteering+0xc4>
 8000e26:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e2a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000e98 <__SSL482_GetProcessedSteering+0xc8>
 8000e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e32:	edc7 7a03 	vstr	s15, [r7, #12]
 8000e36:	e014      	b.n	8000e62 <__SSL482_GetProcessedSteering+0x92>
	else if(raw<-SSL482_STEERING_NEUTRAL_RADIUS)
 8000e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e3c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e9c <__SSL482_GetProcessedSteering+0xcc>
 8000e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	d50b      	bpl.n	8000e62 <__SSL482_GetProcessedSteering+0x92>
		result =  -(raw + SSL482_STEERING_NEUTRAL_RADIUS)/(SSL482_STEERING_MIN_VALUE - SSL482_STEERING_NEUTRAL_VALUE + SSL482_STEERING_NEUTRAL_RADIUS);
 8000e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e4e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000e94 <__SSL482_GetProcessedSteering+0xc4>
 8000e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e56:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000ea0 <__SSL482_GetProcessedSteering+0xd0>
 8000e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5e:	edc7 7a03 	vstr	s15, [r7, #12]

	return fminf(fmaxf(result, -1), 1);
 8000e62:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8000e66:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e6a:	f004 ffbf 	bl	8005dec <fmaxf>
 8000e6e:	eef0 7a40 	vmov.f32	s15, s0
 8000e72:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f004 ffd2 	bl	8005e22 <fminf>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e82:	eeb0 0a67 	vmov.f32	s0, s15
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	00000000 	.word	0x00000000
 8000e90:	44808000 	.word	0x44808000
 8000e94:	42480000 	.word	0x42480000
 8000e98:	4418c000 	.word	0x4418c000
 8000e9c:	c2480000 	.word	0xc2480000
 8000ea0:	441b8000 	.word	0x441b8000

08000ea4 <__SSL482_GetProcessedAUX1>:
/**
 * @brief Format AUX1 value to usable form.
 * @param aux1Raw raw AUX1 value
 * @return AUX1 state
 * */
SW1_State_EnumTypeDef __SSL482_GetProcessedAUX1(uint16_t aux1Raw) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
	switch(aux1Raw) {
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	f240 1257 	movw	r2, #343	; 0x157
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d003      	beq.n	8000ec0 <__SSL482_GetProcessedAUX1+0x1c>
 8000eb8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <__SSL482_GetProcessedAUX1+0x20>
		case SSL482_SW1_PRESSED:
		case SSL482_SW1_RELESSED:
			return aux1Raw;
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	e000      	b.n	8000ec6 <__SSL482_GetProcessedAUX1+0x22>
	}

	return SSL482_SW1_UNKNOW;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <__SSL482_GetProcessedAUX2>:
/**
 * @brief Format AUX2 value to usable form.
 * @param aux2Raw raw AUX2 value
 * @return AUX2 state
 * */
SW3_State_EnumTypeDef __SSL482_GetProcessedAUX2(uint16_t aux2Raw) {
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	80fb      	strh	r3, [r7, #6]
	switch(aux2Raw) {
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f240 62a7 	movw	r2, #1703	; 0x6a7
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00a      	beq.n	8000efc <__SSL482_GetProcessedAUX2+0x2a>
 8000ee6:	f5b3 6fd5 	cmp.w	r3, #1704	; 0x6a8
 8000eea:	da09      	bge.n	8000f00 <__SSL482_GetProcessedAUX2+0x2e>
 8000eec:	f240 1257 	movw	r2, #343	; 0x157
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d003      	beq.n	8000efc <__SSL482_GetProcessedAUX2+0x2a>
 8000ef4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d101      	bne.n	8000f00 <__SSL482_GetProcessedAUX2+0x2e>
		case SSL482_SW3_POSITION_1:
		case SSL482_SW3_POSITION_2:
		case SSL482_SW3_POSITION_3:
			return aux2Raw;
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	e000      	b.n	8000f02 <__SSL482_GetProcessedAUX2+0x30>
	}

	return SSL482_SW3_UNKNOW;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <__SSL482_GetFrameCheckum>:
/**
 * @brief Check if frame is valid.
 * @param buffer RC frame
 * @return 1 if frame is valid, 0 if not
 * */
uint8_t __SSL482_GetFrameCheckum(uint8_t* buffer) {
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	uint8_t controlSum = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i<9; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	e009      	b.n	8000f34 <__SSL482_GetFrameCheckum+0x26>
		controlSum +=buffer[i];
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<9; i++)
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73bb      	strb	r3, [r7, #14]
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d9f2      	bls.n	8000f20 <__SSL482_GetFrameCheckum+0x12>

	return (controlSum==buffer[9]);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3309      	adds	r3, #9
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_MspInit+0x44>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_MspInit+0x44>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x44>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x44>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a15      	ldr	r2, [pc, #84]	; (8001014 <HAL_ADC_MspInit+0x74>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d124      	bne.n	800100c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_ADC_MspInit+0x78>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 f9f2 	bl	80023f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	50000100 	.word	0x50000100
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800102c:	d10b      	bne.n	8001046 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_TIM_PWM_MspInit+0x38>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_TIM_PWM_MspInit+0x38>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_TIM_PWM_MspInit+0x38>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_TIM_Base_MspInit+0x38>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40000400 	.word	0x40000400
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b8:	d11d      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_TIM_MspPostInit+0xa8>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a20      	ldr	r2, [pc, #128]	; (8001140 <HAL_TIM_MspPostInit+0xa8>)
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_TIM_MspPostInit+0xa8>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ESC_PWM_Pin;
 80010d2:	2301      	movs	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e2:	2301      	movs	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESC_PWM_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f001 f97e 	bl	80023f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f4:	e020      	b.n	8001138 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_TIM_MspPostInit+0xac>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d11b      	bne.n	8001138 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_TIM_MspPostInit+0xa8>)
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_TIM_MspPostInit+0xa8>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110a:	6153      	str	r3, [r2, #20]
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_TIM_MspPostInit+0xa8>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3_PWM_Pin|U1_PWM_Pin;
 8001118:	2330      	movs	r3, #48	; 0x30
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001128:	2302      	movs	r3, #2
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 8001134:	f001 f95c 	bl	80023f0 <HAL_GPIO_Init>
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000
 8001144:	40000400 	.word	0x40000400
 8001148:	48000400 	.word	0x48000400

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <HAL_UART_MspInit+0xd8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d156      	bne.n	800121c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_UART_MspInit+0xdc>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_UART_MspInit+0xdc>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_UART_MspInit+0xdc>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <HAL_UART_MspInit+0xdc>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_UART_MspInit+0xdc>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_UART_MspInit+0xdc>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|RC_RX_Pin;
 800119e:	230c      	movs	r3, #12
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ae:	2307      	movs	r3, #7
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f001 f918 	bl	80023f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_UART_MspInit+0xe4>)
 80011c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011e6:	2220      	movs	r2, #32
 80011e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <HAL_UART_MspInit+0xe0>)
 80011f2:	f000 feee 	bl	8001fd2 <HAL_DMA_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80011fc:	f7ff fc12 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_UART_MspInit+0xe0>)
 8001204:	671a      	str	r2, [r3, #112]	; 0x70
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_UART_MspInit+0xe0>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2026      	movs	r0, #38	; 0x26
 8001212:	f000 fea8 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001216:	2026      	movs	r0, #38	; 0x26
 8001218:	f000 fec1 	bl	8001f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004400 	.word	0x40004400
 8001228:	40021000 	.word	0x40021000
 800122c:	20000028 	.word	0x20000028
 8001230:	4002006c 	.word	0x4002006c

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 f898 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA1_Channel6_IRQHandler+0x10>)
 800128e:	f000 ffbd 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000028 	.word	0x20000028

0800129c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART2_IRQHandler+0x10>)
 80012a2:	f003 fd1d 	bl	8004ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000194 	.word	0x20000194

080012b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800130c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopForever+0x6>)
  ldr r1, =_edata
 80012da:	490e      	ldr	r1, [pc, #56]	; (8001314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <LoopForever+0xe>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f0:	4c0b      	ldr	r4, [pc, #44]	; (8001320 <LoopForever+0x16>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012fe:	f7ff ffd7 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001302:	f004 fd39 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001306:	f7ff f857 	bl	80003b8 <main>

0800130a <LoopForever>:

LoopForever:
    b LoopForever
 800130a:	e7fe      	b.n	800130a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800130c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001318:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 800131c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001320:	2000021c 	.word	0x2000021c

08001324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_2_IRQHandler>
	...

08001328 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 fe09 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	200f      	movs	r0, #15
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fe08 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe21 	bl	8001fba <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001390:	f000 fde9 	bl	8001f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000218 	.word	0x20000218

080013dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;  
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000218 	.word	0x20000218

080013f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffee 	bl	80013dc <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffde 	bl	80013dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008

0800143c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b09a      	sub	sp, #104	; 0x68
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e172      	b.n	8001742 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d176      	bne.n	800155c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d152      	bne.n	800151c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd85 	bl	8000fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d13b      	bne.n	800151c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fc1d 	bl	8001ce4 <ADC_Disable>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d12f      	bne.n	800151c <HAL_ADC_Init+0xe0>
 80014bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d12b      	bne.n	800151c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014cc:	f023 0302 	bic.w	r3, r3, #2
 80014d0:	f043 0202 	orr.w	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014f8:	4b94      	ldr	r3, [pc, #592]	; (800174c <HAL_ADC_Init+0x310>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a94      	ldr	r2, [pc, #592]	; (8001750 <HAL_ADC_Init+0x314>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9a      	lsrs	r2, r3, #18
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800150e:	e002      	b.n	8001516 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3b01      	subs	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f9      	bne.n	8001510 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001538:	d110      	bne.n	800155c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f023 0312 	bic.w	r3, r3, #18
 8001542:	f043 0210 	orr.w	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 80df 	bne.w	8001728 <HAL_ADC_Init+0x2ec>
 800156a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 80da 	bne.w	8001728 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 80d2 	bne.w	8001728 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800158c:	f043 0202 	orr.w	r2, r3, #2
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b6f      	ldr	r3, [pc, #444]	; (8001754 <HAL_ADC_Init+0x318>)
 8001596:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a0:	d102      	bne.n	80015a8 <HAL_ADC_Init+0x16c>
 80015a2:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_ADC_Init+0x31c>)
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e002      	b.n	80015ae <HAL_ADC_Init+0x172>
 80015a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <HAL_ADC_Init+0x192>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x192>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_Init+0x194>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11c      	bne.n	800160e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_ADC_Init+0x1ba>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x1ba>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_Init+0x1bc>
 80015f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	431a      	orrs	r2, r3
 800160a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7e5b      	ldrb	r3, [r3, #25]
 8001612:	035b      	lsls	r3, r3, #13
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001618:	2a01      	cmp	r2, #1
 800161a:	d002      	beq.n	8001622 <HAL_ADC_Init+0x1e6>
 800161c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001620:	e000      	b.n	8001624 <HAL_ADC_Init+0x1e8>
 8001622:	2200      	movs	r2, #0
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4313      	orrs	r3, r2
 8001632:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001634:	4313      	orrs	r3, r2
 8001636:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d11b      	bne.n	800167a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	3b01      	subs	r3, #1
 8001650:	045a      	lsls	r2, r3, #17
 8001652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001654:	4313      	orrs	r3, r2
 8001656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165a:	663b      	str	r3, [r7, #96]	; 0x60
 800165c:	e00d      	b.n	800167a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001666:	f043 0220 	orr.w	r2, r3, #32
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	2b01      	cmp	r3, #1
 8001680:	d007      	beq.n	8001692 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	4313      	orrs	r3, r2
 800168c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800168e:	4313      	orrs	r3, r2
 8001690:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b00      	cmp	r3, #0
 800169e:	d114      	bne.n	80016ca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
 80016b8:	039a      	lsls	r2, r3, #14
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4313      	orrs	r3, r2
 80016c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016c6:	4313      	orrs	r3, r2
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_ADC_Init+0x320>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016da:	430b      	orrs	r3, r1
 80016dc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10c      	bne.n	8001700 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f023 010f 	bic.w	r1, r3, #15
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
 80016fe:	e007      	b.n	8001710 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020f 	bic.w	r2, r2, #15
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f023 0303 	bic.w	r3, r3, #3
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
 8001726:	e00a      	b.n	800173e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f023 0312 	bic.w	r3, r3, #18
 8001730:	f043 0210 	orr.w	r2, r3, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800173e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001742:	4618      	mov	r0, r3
 8001744:	3768      	adds	r7, #104	; 0x68
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83
 8001754:	50000300 	.word	0x50000300
 8001758:	50000100 	.word	0x50000100
 800175c:	fff0c007 	.word	0xfff0c007

08001760 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001760:	b480      	push	{r7}
 8001762:	b09b      	sub	sp, #108	; 0x6c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x22>
 800177e:	2302      	movs	r3, #2
 8001780:	e2a5      	b.n	8001cce <HAL_ADC_ConfigChannel+0x56e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 8289 	bne.w	8001cac <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d81c      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	461a      	mov	r2, r3
 80017b6:	231f      	movs	r3, #31
 80017b8:	4093      	lsls	r3, r2
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4019      	ands	r1, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
 80017da:	e063      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	d81e      	bhi.n	8001822 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	3b1e      	subs	r3, #30
 80017f8:	221f      	movs	r2, #31
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	4019      	ands	r1, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	3b1e      	subs	r3, #30
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
 8001820:	e040      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b0e      	cmp	r3, #14
 8001828:	d81e      	bhi.n	8001868 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	3b3c      	subs	r3, #60	; 0x3c
 800183e:	221f      	movs	r2, #31
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	3b3c      	subs	r3, #60	; 0x3c
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
 8001866:	e01d      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	3b5a      	subs	r3, #90	; 0x5a
 800187c:	221f      	movs	r2, #31
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	4019      	ands	r1, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	3b5a      	subs	r3, #90	; 0x5a
 8001898:	fa00 f203 	lsl.w	r2, r0, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80e5 	bne.w	8001a7e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d91c      	bls.n	80018f6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6999      	ldr	r1, [r3, #24]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4019      	ands	r1, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6898      	ldr	r0, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	3b1e      	subs	r3, #30
 80018e8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	619a      	str	r2, [r3, #24]
 80018f4:	e019      	b.n	800192a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6959      	ldr	r1, [r3, #20]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	fa00 f203 	lsl.w	r2, r0, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	3b01      	subs	r3, #1
 8001948:	2b03      	cmp	r3, #3
 800194a:	d84f      	bhi.n	80019ec <HAL_ADC_ConfigChannel+0x28c>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <HAL_ADC_ConfigChannel+0x1f4>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001965 	.word	0x08001965
 8001958:	08001987 	.word	0x08001987
 800195c:	080019a9 	.word	0x080019a9
 8001960:	080019cb 	.word	0x080019cb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800196a:	4b9e      	ldr	r3, [pc, #632]	; (8001be4 <HAL_ADC_ConfigChannel+0x484>)
 800196c:	4013      	ands	r3, r2
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	0691      	lsls	r1, r2, #26
 8001974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001976:	430a      	orrs	r2, r1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001982:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001984:	e07e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800198c:	4b95      	ldr	r3, [pc, #596]	; (8001be4 <HAL_ADC_ConfigChannel+0x484>)
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	0691      	lsls	r1, r2, #26
 8001996:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001998:	430a      	orrs	r2, r1
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019a4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019a6:	e06d      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019ae:	4b8d      	ldr	r3, [pc, #564]	; (8001be4 <HAL_ADC_ConfigChannel+0x484>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	0691      	lsls	r1, r2, #26
 80019b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ba:	430a      	orrs	r2, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019c6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019c8:	e05c      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019d0:	4b84      	ldr	r3, [pc, #528]	; (8001be4 <HAL_ADC_ConfigChannel+0x484>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	0691      	lsls	r1, r2, #26
 80019da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019dc:	430a      	orrs	r2, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ea:	e04b      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	069b      	lsls	r3, r3, #26
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d107      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a0e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a32:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	069b      	lsls	r3, r3, #26
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a56:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	069b      	lsls	r3, r3, #26
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d10a      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a7a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a7c:	e001      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a7e:	bf00      	nop
 8001a80:	e000      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a82:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x344>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x344>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x346>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 810b 	bne.w	8001cc2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d00f      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	400a      	ands	r2, r1
 8001ace:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ad2:	e049      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d91c      	bls.n	8001b30 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6999      	ldr	r1, [r3, #24]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	3b1b      	subs	r3, #27
 8001b08:	2207      	movs	r2, #7
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4019      	ands	r1, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6898      	ldr	r0, [r3, #8]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b1b      	subs	r3, #27
 8001b22:	fa00 f203 	lsl.w	r2, r0, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	619a      	str	r2, [r3, #24]
 8001b2e:	e01b      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6959      	ldr	r1, [r3, #20]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	2207      	movs	r2, #7
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4019      	ands	r1, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6898      	ldr	r0, [r3, #8]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_ADC_ConfigChannel+0x488>)
 8001b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b98:	2b12      	cmp	r3, #18
 8001b9a:	f040 8092 	bne.w	8001cc2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 808b 	bne.w	8001cc2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb4:	d102      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x45c>
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_ADC_ConfigChannel+0x48c>)
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	e002      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x462>
 8001bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bc0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10f      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x490>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d108      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x490>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x492>
 8001be2:	bf00      	nop
 8001be4:	83fff000 	.word	0x83fff000
 8001be8:	50000300 	.word	0x50000300
 8001bec:	50000100 	.word	0x50000100
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d150      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x4b8>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x4b8>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x4ba>
 8001c18:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d13c      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d11d      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x502>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2e:	d118      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_ADC_ConfigChannel+0x57c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <HAL_ADC_ConfigChannel+0x580>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0c9a      	lsrs	r2, r3, #18
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c52:	e002      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f9      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c60:	e02e      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b11      	cmp	r3, #17
 8001c68:	d10b      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x522>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c72:	d106      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c80:	e01e      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d11a      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c94:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c96:	e013      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f043 0220 	orr.w	r2, r3, #32
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001caa:	e00a      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cc0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	376c      	adds	r7, #108	; 0x6c
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <ADC_Disable+0x2c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <ADC_Disable+0x2c>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <ADC_Disable+0x2e>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d047      	beq.n	8001da6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030d 	and.w	r3, r3, #13
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10f      	bne.n	8001d44 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0202 	orr.w	r2, r2, #2
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fb4e 	bl	80013dc <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d42:	e029      	b.n	8001d98 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f043 0210 	orr.w	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e023      	b.n	8001da8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d60:	f7ff fb3c 	bl	80013dc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d914      	bls.n	8001d98 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10d      	bne.n	8001d98 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0210 	orr.w	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e007      	b.n	8001da8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d0dc      	beq.n	8001d60 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f30:	f7ff ff8e 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff29 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff3e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff8e 	bl	8001ea4 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff31 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e037      	b.n	8002058 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ffe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002002:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f9b8 	bl	80023b0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}  
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Start_IT+0x20>
 800207c:	2302      	movs	r3, #2
 800207e:	e04a      	b.n	8002116 <HAL_DMA_Start_IT+0xb6>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800208e:	2b01      	cmp	r3, #1
 8002090:	d13a      	bne.n	8002108 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f94b 	bl	8002352 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 020e 	orr.w	r2, r2, #14
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e00f      	b.n	80020f6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 020a 	orr.w	r2, r2, #10
 80020e4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0204 	bic.w	r2, r2, #4
 80020f4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e005      	b.n	8002114 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002110:	2302      	movs	r3, #2
 8002112:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002114:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212c:	2b02      	cmp	r3, #2
 800212e:	d008      	beq.n	8002142 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e020      	b.n	8002184 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 020e 	bic.w	r2, r2, #14
 8002150:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d005      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2204      	movs	r2, #4
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e027      	b.n	8002202 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 020e 	bic.w	r2, r2, #14
 80021c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
    } 
  }
  return status;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d024      	beq.n	800227e <HAL_DMA_IRQHandler+0x72>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01f      	beq.n	800227e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2104      	movs	r1, #4
 8002266:	fa01 f202 	lsl.w	r2, r1, r2
 800226a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d06a      	beq.n	800234a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800227c:	e065      	b.n	800234a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2202      	movs	r2, #2
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02c      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xdc>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d027      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10b      	bne.n	80022be <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 020a 	bic.w	r2, r2, #10
 80022b4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2102      	movs	r1, #2
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d035      	beq.n	800234a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022e6:	e030      	b.n	800234a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2208      	movs	r2, #8
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d028      	beq.n	800234a <HAL_DMA_IRQHandler+0x13e>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d023      	beq.n	800234a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 020e 	bic.w	r2, r2, #14
 8002310:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
    }
  }
}  
 8002348:	e7ff      	b.n	800234a <HAL_DMA_IRQHandler+0x13e>
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f202 	lsl.w	r2, r1, r2
 800236e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b10      	cmp	r3, #16
 800237e:	d108      	bne.n	8002392 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002390:	e007      	b.n	80023a2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	60da      	str	r2, [r3, #12]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <DMA_CalcBaseAndBitshift+0x34>)
 80023c0:	4413      	add	r3, r2
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <DMA_CalcBaseAndBitshift+0x38>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <DMA_CalcBaseAndBitshift+0x3c>)
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	bffdfff8 	.word	0xbffdfff8
 80023e8:	cccccccd 	.word	0xcccccccd
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e14e      	b.n	800269e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8140 	beq.w	8002698 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d005      	beq.n	8002430 <HAL_GPIO_Init+0x40>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d130      	bne.n	8002492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002466:	2201      	movs	r2, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0201 	and.w	r2, r3, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d017      	beq.n	80024ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 809a 	beq.w	8002698 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002564:	4b55      	ldr	r3, [pc, #340]	; (80026bc <HAL_GPIO_Init+0x2cc>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a54      	ldr	r2, [pc, #336]	; (80026bc <HAL_GPIO_Init+0x2cc>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b52      	ldr	r3, [pc, #328]	; (80026bc <HAL_GPIO_Init+0x2cc>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a6:	d013      	beq.n	80025d0 <HAL_GPIO_Init+0x1e0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a46      	ldr	r2, [pc, #280]	; (80026c4 <HAL_GPIO_Init+0x2d4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00d      	beq.n	80025cc <HAL_GPIO_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_GPIO_Init+0x2d8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d007      	beq.n	80025c8 <HAL_GPIO_Init+0x1d8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a44      	ldr	r2, [pc, #272]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_GPIO_Init+0x1d4>
 80025c0:	2303      	movs	r3, #3
 80025c2:	e006      	b.n	80025d2 <HAL_GPIO_Init+0x1e2>
 80025c4:	2305      	movs	r3, #5
 80025c6:	e004      	b.n	80025d2 <HAL_GPIO_Init+0x1e2>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e002      	b.n	80025d2 <HAL_GPIO_Init+0x1e2>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_GPIO_Init+0x1e2>
 80025d0:	2300      	movs	r3, #0
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	4093      	lsls	r3, r2
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e2:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f0:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002614:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800263e:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002692:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_GPIO_Init+0x2e0>)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f aea9 	bne.w	8002400 <HAL_GPIO_Init+0x10>
  }
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40010000 	.word	0x40010000
 80026c4:	48000400 	.word	0x48000400
 80026c8:	48000800 	.word	0x48000800
 80026cc:	48000c00 	.word	0x48000c00
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43d9      	mvns	r1, r3
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	400b      	ands	r3, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800273e:	af00      	add	r7, sp, #0
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f000 bef4 	b.w	800353a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 816a 	beq.w	8002a36 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002762:	4bb3      	ldr	r3, [pc, #716]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d00c      	beq.n	8002788 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800276e:	4bb0      	ldr	r3, [pc, #704]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d159      	bne.n	800282e <HAL_RCC_OscConfig+0xf6>
 800277a:	4bad      	ldr	r3, [pc, #692]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002786:	d152      	bne.n	800282e <HAL_RCC_OscConfig+0xf6>
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800279c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0x82>
 80027b4:	4b9e      	ldr	r3, [pc, #632]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0xae>
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027e2:	4b93      	ldr	r3, [pc, #588]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 810c 	beq.w	8002a34 <HAL_RCC_OscConfig+0x2fc>
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 8106 	bne.w	8002a34 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f000 be86 	b.w	800353a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x110>
 800283a:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7c      	ldr	r2, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e030      	b.n	80028aa <HAL_RCC_OscConfig+0x172>
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x134>
 8002852:	4b77      	ldr	r3, [pc, #476]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a76      	ldr	r2, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b74      	ldr	r3, [pc, #464]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a73      	ldr	r2, [pc, #460]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01e      	b.n	80028aa <HAL_RCC_OscConfig+0x172>
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0x15a>
 8002878:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6c      	ldr	r2, [pc, #432]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800287e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a69      	ldr	r2, [pc, #420]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e00b      	b.n	80028aa <HAL_RCC_OscConfig+0x172>
 8002892:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a66      	ldr	r2, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a63      	ldr	r2, [pc, #396]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028aa:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f023 020f 	bic.w	r2, r3, #15
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	495d      	ldr	r1, [pc, #372]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d059      	beq.n	800297c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fd88 	bl	80013dc <HAL_GetTick>
 80028cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d2:	f7fe fd83 	bl	80013dc <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d902      	bls.n	80028e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f000 be29 	b.w	800353a <HAL_RCC_OscConfig+0xe02>
 80028e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_RCC_OscConfig+0x1e2>
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x20e>
 800291a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800292e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002932:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002936:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800294e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002952:	fa92 f2a2 	rbit	r2, r2
 8002956:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800295a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ab      	beq.n	80028d2 <HAL_RCC_OscConfig+0x19a>
 800297a:	e05c      	b.n	8002a36 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fd2e 	bl	80013dc <HAL_GetTick>
 8002980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002986:	f7fe fd29 	bl	80013dc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d902      	bls.n	800299c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	f000 bdcf 	b.w	800353a <HAL_RCC_OscConfig+0xe02>
 800299c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_RCC_OscConfig+0x296>
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	e015      	b.n	80029fa <HAL_RCC_OscConfig+0x2c2>
 80029ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCC_OscConfig+0x2f8>)
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a02:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a06:	fa92 f2a2 	rbit	r2, r2
 8002a0a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a0e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ab      	bne.n	8002986 <HAL_RCC_OscConfig+0x24e>
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_OscConfig+0x2fe>
 8002a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 816f 	beq.w	8002d24 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a46:	4bd0      	ldr	r3, [pc, #832]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a52:	4bcd      	ldr	r3, [pc, #820]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d16c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x400>
 8002a5e:	4bca      	ldr	r3, [pc, #808]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d166      	bne.n	8002b38 <HAL_RCC_OscConfig+0x400>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_OscConfig+0x362>
 8002a94:	4bbc      	ldr	r3, [pc, #752]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	e013      	b.n	8002ac2 <HAL_RCC_OscConfig+0x38a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ab2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002abe:	4bb2      	ldr	r3, [pc, #712]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ac8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002acc:	fa92 f2a2 	rbit	r2, r2
 8002ad0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ad4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <HAL_RCC_OscConfig+0x3cc>
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f000 bd1b 	b.w	800353a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4ba0      	ldr	r3, [pc, #640]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	21f8      	movs	r1, #248	; 0xf8
 8002b14:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b1c:	fa91 f1a1 	rbit	r1, r1
 8002b20:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b24:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b28:	fab1 f181 	clz	r1, r1
 8002b2c:	b2c9      	uxtb	r1, r1
 8002b2e:	408b      	lsls	r3, r1
 8002b30:	4995      	ldr	r1, [pc, #596]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e0f5      	b.n	8002d24 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8085 	beq.w	8002c4e <HAL_RCC_OscConfig+0x516>
 8002b44:	2301      	movs	r3, #1
 8002b46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fc34 	bl	80013dc <HAL_GetTick>
 8002b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fc2f 	bl	80013dc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d902      	bls.n	8002b90 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	f000 bcd5 	b.w	800353a <HAL_RCC_OscConfig+0xe02>
 8002b90:	2302      	movs	r3, #2
 8002b92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ba2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x488>
 8002bba:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x4b0>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2202      	movs	r2, #2
 8002bea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bfa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f042 0220 	orr.w	r2, r2, #32
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f002 021f 	and.w	r2, r2, #31
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0af      	beq.n	8002b7a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	21f8      	movs	r1, #248	; 0xf8
 8002c2a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c32:	fa91 f1a1 	rbit	r1, r1
 8002c36:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c3a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c3e:	fab1 f181 	clz	r1, r1
 8002c42:	b2c9      	uxtb	r1, r1
 8002c44:	408b      	lsls	r3, r1
 8002c46:	4950      	ldr	r1, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e06a      	b.n	8002d24 <HAL_RCC_OscConfig+0x5ec>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	2300      	movs	r3, #0
 8002c78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fbaf 	bl	80013dc <HAL_GetTick>
 8002c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fbaa 	bl	80013dc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d902      	bls.n	8002c9a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	f000 bc50 	b.w	800353a <HAL_RCC_OscConfig+0xe02>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0x592>
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	e013      	b.n	8002cf2 <HAL_RCC_OscConfig+0x5ba>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ce2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_RCC_OscConfig+0x650>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cf8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d04:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d08:	fab2 f282 	clz	r2, r2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f002 021f 	and.w	r2, r2, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1af      	bne.n	8002c84 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80da 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d069      	beq.n	8002e12 <HAL_RCC_OscConfig+0x6da>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x654>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	461a      	mov	r2, r3
 8002d64:	2301      	movs	r3, #1
 8002d66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fe fb38 	bl	80013dc <HAL_GetTick>
 8002d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d70:	e00e      	b.n	8002d90 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fe fb33 	bl	80013dc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d906      	bls.n	8002d90 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e3d9      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	10908120 	.word	0x10908120
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002da2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002da6:	2202      	movs	r2, #2
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002dd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4ba5      	ldr	r3, [pc, #660]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002dda:	2102      	movs	r1, #2
 8002ddc:	6019      	str	r1, [r3, #0]
 8002dde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f1a3 	rbit	r1, r3
 8002de8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002dec:	6019      	str	r1, [r3, #0]
  return result;
 8002dee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0b0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x63a>
 8002e10:	e06a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x7b0>
 8002e12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e28:	601a      	str	r2, [r3, #0]
  return result;
 8002e2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e2e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x934>)
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e44:	f7fe faca 	bl	80013dc <HAL_GetTick>
 8002e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e009      	b.n	8002e62 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fac5 	bl	80013dc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e36b      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 8002e62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e66:	2202      	movs	r2, #2
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e7e:	2202      	movs	r2, #2
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ea8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	4b6f      	ldr	r3, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	fa93 f1a3 	rbit	r1, r3
 8002ec0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ec4:	6019      	str	r1, [r3, #0]
  return result;
 8002ec6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1b2      	bne.n	8002e4e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8158 	beq.w	80031a8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efe:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d112      	bne.n	8002f30 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a56      	ldr	r2, [pc, #344]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]
 8002f16:	4b54      	ldr	r3, [pc, #336]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f107 0308 	add.w	r3, r7, #8
 8002f28:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x938>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11a      	bne.n	8002f72 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_RCC_OscConfig+0x938>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_RCC_OscConfig+0x938>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f48:	f7fe fa48 	bl	80013dc <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fa43 	bl	80013dc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e2e9      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_RCC_OscConfig+0x938>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ef      	beq.n	8002f52 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x852>
 8002f7c:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a39      	ldr	r2, [pc, #228]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	e02f      	b.n	8002fea <HAL_RCC_OscConfig+0x8b2>
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10c      	bne.n	8002fae <HAL_RCC_OscConfig+0x876>
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a33      	ldr	r2, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a30      	ldr	r2, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	e01d      	b.n	8002fea <HAL_RCC_OscConfig+0x8b2>
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x89a>
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a27      	ldr	r2, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	e00b      	b.n	8002fea <HAL_RCC_OscConfig+0x8b2>
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6213      	str	r3, [r2, #32]
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d06b      	beq.n	80030cc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f9f2 	bl	80013dc <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe f9ed 	bl	80013dc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e291      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 8003016:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003044:	601a      	str	r2, [r3, #0]
  return result;
 8003046:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800304a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d109      	bne.n	8003074 <HAL_RCC_OscConfig+0x93c>
 8003060:	4b01      	ldr	r3, [pc, #4]	; (8003068 <HAL_RCC_OscConfig+0x930>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	e014      	b.n	8003090 <HAL_RCC_OscConfig+0x958>
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	10908120 	.word	0x10908120
 8003070:	40007000 	.word	0x40007000
 8003074:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003078:	2202      	movs	r2, #2
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	fa93 f2a3 	rbit	r2, r3
 8003086:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4bbb      	ldr	r3, [pc, #748]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003094:	2102      	movs	r1, #2
 8003096:	6011      	str	r1, [r2, #0]
 8003098:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	fa92 f1a2 	rbit	r1, r2
 80030a2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80030a6:	6011      	str	r1, [r2, #0]
  return result;
 80030a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	fab2 f282 	clz	r2, r2
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f002 021f 	and.w	r2, r2, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d099      	beq.n	8002ffe <HAL_RCC_OscConfig+0x8c6>
 80030ca:	e063      	b.n	8003194 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7fe f986 	bl	80013dc <HAL_GetTick>
 80030d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	e00b      	b.n	80030ee <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe f981 	bl	80013dc <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e225      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 80030ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800310a:	2202      	movs	r2, #2
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800311c:	601a      	str	r2, [r3, #0]
  return result;
 800311e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003122:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d102      	bne.n	800313e <HAL_RCC_OscConfig+0xa06>
 8003138:	4b90      	ldr	r3, [pc, #576]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	e00d      	b.n	800315a <HAL_RCC_OscConfig+0xa22>
 800313e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003142:	2202      	movs	r2, #2
 8003144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	4b89      	ldr	r3, [pc, #548]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800315e:	2102      	movs	r1, #2
 8003160:	6011      	str	r1, [r2, #0]
 8003162:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	fa92 f1a2 	rbit	r1, r2
 800316c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003170:	6011      	str	r1, [r2, #0]
  return result;
 8003172:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	f002 021f 	and.w	r2, r2, #31
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f202 	lsl.w	r2, r1, r2
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1a0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003194:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003198:	2b01      	cmp	r3, #1
 800319a:	d105      	bne.n	80031a8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319c:	4b77      	ldr	r3, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4a76      	ldr	r2, [pc, #472]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 80031a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 81c2 	beq.w	8003538 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b4:	4b71      	ldr	r3, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	f000 819c 	beq.w	80034fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	f040 8114 	bne.w	80033f6 <HAL_RCC_OscConfig+0xcbe>
 80031ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	fa93 f2a3 	rbit	r2, r3
 80031e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031e6:	601a      	str	r2, [r3, #0]
  return result;
 80031e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	2300      	movs	r3, #0
 8003202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe f8ea 	bl	80013dc <HAL_GetTick>
 8003208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	e009      	b.n	8003222 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320e:	f7fe f8e5 	bl	80013dc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e18b      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 8003222:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800322a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800323a:	601a      	str	r2, [r3, #0]
  return result;
 800323c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003240:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_RCC_OscConfig+0xb24>
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	e01b      	b.n	8003294 <HAL_RCC_OscConfig+0xb5c>
 800325c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800327a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003298:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	fa92 f1a2 	rbit	r1, r2
 80032a8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80032ac:	6011      	str	r1, [r2, #0]
  return result;
 80032ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d19e      	bne.n	800320e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	4925      	ldr	r1, [pc, #148]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fa93 f2a3 	rbit	r2, r3
 8003300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003304:	601a      	str	r2, [r3, #0]
  return result;
 8003306:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800330a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003316:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	461a      	mov	r2, r3
 800331e:	2301      	movs	r3, #1
 8003320:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe f85b 	bl	80013dc <HAL_GetTick>
 8003326:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332a:	e009      	b.n	8003340 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe f856 	bl	80013dc <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0fc      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 8003340:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f2a3 	rbit	r2, r3
 8003354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003358:	601a      	str	r2, [r3, #0]
  return result;
 800335a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800335e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0xc48>
 8003374:	4b01      	ldr	r3, [pc, #4]	; (800337c <HAL_RCC_OscConfig+0xc44>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	e01e      	b.n	80033b8 <HAL_RCC_OscConfig+0xc80>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800339e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_OscConfig+0xe0c>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	fa92 f1a2 	rbit	r1, r2
 80033cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80033d0:	6011      	str	r1, [r2, #0]
  return result;
 80033d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	fab2 f282 	clz	r2, r2
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f042 0220 	orr.w	r2, r2, #32
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f002 021f 	and.w	r2, r2, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f202 	lsl.w	r2, r1, r2
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d09b      	beq.n	800332c <HAL_RCC_OscConfig+0xbf4>
 80033f4:	e0a0      	b.n	8003538 <HAL_RCC_OscConfig+0xe00>
 80033f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003414:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd ffd6 	bl	80013dc <HAL_GetTick>
 8003430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	e009      	b.n	800344a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd ffd1 	bl	80013dc <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e077      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
 800344a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800344e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	601a      	str	r2, [r3, #0]
  return result;
 8003464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003468:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_RCC_OscConfig+0xd4c>
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_OscConfig+0xe0c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	e01b      	b.n	80034bc <HAL_RCC_OscConfig+0xd84>
 8003484:	f107 0320 	add.w	r3, r7, #32
 8003488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f107 0320 	add.w	r3, r7, #32
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f107 0318 	add.w	r3, r7, #24
 80034a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_OscConfig+0xe0c>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f107 0210 	add.w	r2, r7, #16
 80034c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034c4:	6011      	str	r1, [r2, #0]
 80034c6:	f107 0210 	add.w	r2, r7, #16
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	fa92 f1a2 	rbit	r1, r2
 80034d0:	f107 020c 	add.w	r2, r7, #12
 80034d4:	6011      	str	r1, [r2, #0]
  return result;
 80034d6:	f107 020c 	add.w	r2, r7, #12
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	fab2 f282 	clz	r2, r2
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	f042 0220 	orr.w	r2, r2, #32
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	f002 021f 	and.w	r2, r2, #31
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d19e      	bne.n	8003436 <HAL_RCC_OscConfig+0xcfe>
 80034f8:	e01e      	b.n	8003538 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e018      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCC_OscConfig+0xe0c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003510:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	429a      	cmp	r2, r3
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003522:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b09e      	sub	sp, #120	; 0x78
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e162      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b90      	ldr	r3, [pc, #576]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d910      	bls.n	8003590 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b8d      	ldr	r3, [pc, #564]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	498b      	ldr	r1, [pc, #556]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b89      	ldr	r3, [pc, #548]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e14a      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359c:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	497f      	ldr	r1, [pc, #508]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80dc 	beq.w	8003774 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d13c      	bne.n	800363e <HAL_RCC_ClockConfig+0xf6>
 80035c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d102      	bne.n	80035ee <HAL_RCC_ClockConfig+0xa6>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	e00f      	b.n	800360e <HAL_RCC_ClockConfig+0xc6>
 80035ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	667b      	str	r3, [r7, #100]	; 0x64
 80035fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003600:	663b      	str	r3, [r7, #96]	; 0x60
 8003602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003612:	65ba      	str	r2, [r7, #88]	; 0x58
 8003614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800361c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800361e:	fab2 f282 	clz	r2, r2
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f002 021f 	and.w	r2, r2, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d17b      	bne.n	8003732 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0f3      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d13c      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x178>
 8003646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_RCC_ClockConfig+0x128>
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	e00f      	b.n	8003690 <HAL_RCC_ClockConfig+0x148>
 8003670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003674:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	647b      	str	r3, [r7, #68]	; 0x44
 800367e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003682:	643b      	str	r3, [r7, #64]	; 0x40
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368c:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003694:	63ba      	str	r2, [r7, #56]	; 0x38
 8003696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003698:	fa92 f2a2 	rbit	r2, r2
 800369c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800369e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	f042 0220 	orr.w	r2, r2, #32
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f002 021f 	and.w	r2, r2, #31
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d13a      	bne.n	8003732 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b2      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
 80036c0:	2302      	movs	r3, #2
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x1a0>
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	e00d      	b.n	8003704 <HAL_RCC_ClockConfig+0x1bc>
 80036e8:	2302      	movs	r3, #2
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	2302      	movs	r3, #2
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2202      	movs	r2, #2
 8003706:	61ba      	str	r2, [r7, #24]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	617a      	str	r2, [r7, #20]
  return result;
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	f042 0220 	orr.w	r2, r2, #32
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f002 021f 	and.w	r2, r2, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e079      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	491a      	ldr	r1, [pc, #104]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003744:	f7fd fe4a 	bl	80013dc <HAL_GetTick>
 8003748:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fd fe46 	bl	80013dc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e061      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_ClockConfig+0x260>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 020c 	and.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	429a      	cmp	r2, r3
 8003772:	d1eb      	bne.n	800374c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d214      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4906      	ldr	r1, [pc, #24]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <HAL_RCC_ClockConfig+0x25c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e040      	b.n	8003826 <HAL_RCC_ClockConfig+0x2de>
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_RCC_ClockConfig+0x2e8>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	491a      	ldr	r1, [pc, #104]	; (8003830 <HAL_RCC_ClockConfig+0x2e8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <HAL_RCC_ClockConfig+0x2e8>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4912      	ldr	r1, [pc, #72]	; (8003830 <HAL_RCC_ClockConfig+0x2e8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037ea:	f000 f829 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037ee:	4601      	mov	r1, r0
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCC_ClockConfig+0x2e8>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f8:	22f0      	movs	r2, #240	; 0xf0
 80037fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	fa92 f2a2 	rbit	r2, r2
 8003802:	60fa      	str	r2, [r7, #12]
  return result;
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	40d3      	lsrs	r3, r2
 800380e:	4a09      	ldr	r2, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x2ec>)
 8003810:	5cd3      	ldrb	r3, [r2, r3]
 8003812:	fa21 f303 	lsr.w	r3, r1, r3
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <HAL_RCC_ClockConfig+0x2f0>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_ClockConfig+0x2f4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fd98 	bl	8001354 <HAL_InitTick>
  
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3778      	adds	r7, #120	; 0x78
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	08005ea8 	.word	0x08005ea8
 8003838:	20000000 	.word	0x20000000
 800383c:	20000004 	.word	0x20000004

08003840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	b08b      	sub	sp, #44	; 0x2c
 8003844:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_RCC_GetSysClockFreq+0xc0>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d002      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x30>
 800386a:	2b08      	cmp	r3, #8
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x36>
 800386e:	e03c      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003872:	623b      	str	r3, [r7, #32]
      break;
 8003874:	e03c      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800387c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003880:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	fa92 f2a2 	rbit	r2, r2
 8003888:	607a      	str	r2, [r7, #4]
  return result;
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	fab2 f282 	clz	r2, r2
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	40d3      	lsrs	r3, r2
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_RCC_GetSysClockFreq+0xc0>)
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	220f      	movs	r2, #15
 80038a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	fa92 f2a2 	rbit	r2, r2
 80038ac:	60fa      	str	r2, [r7, #12]
  return result;
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	fab2 f282 	clz	r2, r2
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	40d3      	lsrs	r3, r2
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_RCC_GetSysClockFreq+0xcc>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	e004      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	623b      	str	r3, [r7, #32]
      break;
 80038e8:	e002      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038ec:	623b      	str	r3, [r7, #32]
      break;
 80038ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	372c      	adds	r7, #44	; 0x2c
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	007a1200 	.word	0x007a1200
 8003908:	08005ec0 	.word	0x08005ec0
 800390c:	08005ed0 	.word	0x08005ed0
 8003910:	003d0900 	.word	0x003d0900

08003914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <HAL_RCC_GetHCLKFreq+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003932:	f7ff ffef 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003936:	4601      	mov	r1, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003940:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003944:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	fa92 f2a2 	rbit	r2, r2
 800394c:	603a      	str	r2, [r7, #0]
  return result;
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	fab2 f282 	clz	r2, r2
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	40d3      	lsrs	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_RCC_GetPCLK1Freq+0x40>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08005eb8 	.word	0x08005eb8

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003976:	f7ff ffcd 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 800397a:	4601      	mov	r1, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003984:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003988:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	fa92 f2a2 	rbit	r2, r2
 8003990:	603a      	str	r2, [r7, #0]
  return result;
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	fab2 f282 	clz	r2, r2
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	40d3      	lsrs	r3, r2
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08005eb8 	.word	0x08005eb8

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b092      	sub	sp, #72	; 0x48
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80cd 	beq.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10e      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b8b      	ldr	r3, [pc, #556]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a8a      	ldr	r2, [pc, #552]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a81      	ldr	r2, [pc, #516]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fcdf 	bl	80013dc <HAL_GetTick>
 8003a1e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	e008      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fd fcdb 	bl	80013dc <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b64      	cmp	r3, #100	; 0x64
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0ea      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a40:	4b74      	ldr	r3, [pc, #464]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d07d      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d076      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	2301      	movs	r3, #1
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d045      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fc8c 	bl	80013dc <HAL_GetTick>
 8003ac4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fc88 	bl	80013dc <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e095      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	2302      	movs	r3, #2
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	61fb      	str	r3, [r7, #28]
  return result;
 8003af6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b0c:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	e007      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b12:	2302      	movs	r3, #2
 8003b14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2202      	movs	r2, #2
 8003b24:	613a      	str	r2, [r7, #16]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	fa92 f2a2 	rbit	r2, r2
 8003b2c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f002 021f 	and.w	r2, r2, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0bd      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	492e      	ldr	r1, [pc, #184]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7e:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	4922      	ldr	r1, [pc, #136]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f023 0210 	bic.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	491a      	ldr	r1, [pc, #104]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	4913      	ldr	r1, [pc, #76]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	490b      	ldr	r1, [pc, #44]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	4904      	ldr	r1, [pc, #16]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3748      	adds	r7, #72	; 0x48
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	10908100 	.word	0x10908100

08003c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e049      	b.n	8003cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd fa06 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f000 fb56 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e049      	b.n	8003d74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d106      	bne.n	8003cfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fd f991 	bl	800101c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f000 faff 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_TIM_PWM_Start+0x24>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e03c      	b.n	8003e1a <HAL_TIM_PWM_Start+0x9e>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d109      	bne.n	8003dba <HAL_TIM_PWM_Start+0x3e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	bf14      	ite	ne
 8003db2:	2301      	movne	r3, #1
 8003db4:	2300      	moveq	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	e02f      	b.n	8003e1a <HAL_TIM_PWM_Start+0x9e>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d109      	bne.n	8003dd4 <HAL_TIM_PWM_Start+0x58>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e022      	b.n	8003e1a <HAL_TIM_PWM_Start+0x9e>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d109      	bne.n	8003dee <HAL_TIM_PWM_Start+0x72>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	e015      	b.n	8003e1a <HAL_TIM_PWM_Start+0x9e>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d109      	bne.n	8003e08 <HAL_TIM_PWM_Start+0x8c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e008      	b.n	8003e1a <HAL_TIM_PWM_Start+0x9e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e088      	b.n	8003f34 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_TIM_PWM_Start+0xb6>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e30:	e023      	b.n	8003e7a <HAL_TIM_PWM_Start+0xfe>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_PWM_Start+0xc6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e40:	e01b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xfe>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0xd6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_PWM_Start+0xfe>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0xe6>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xfe>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xf6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_PWM_Start+0xfe>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fdfc 	bl	8004a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <HAL_TIM_PWM_Start+0x1c0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00e      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x134>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <HAL_TIM_PWM_Start+0x1c4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x134>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <HAL_TIM_PWM_Start+0x1c8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x134>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <HAL_TIM_PWM_Start+0x1cc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_PWM_Start+0x138>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x13a>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_TIM_PWM_Start+0x1c0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x176>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x176>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIM_PWM_Start+0x1d0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x176>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <HAL_TIM_PWM_Start+0x1c4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d115      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_TIM_PWM_Start+0x1d4>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	d015      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x1b4>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d011      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	e008      	b.n	8003f30 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e000      	b.n	8003f32 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	00010007 	.word	0x00010007

08003f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0ff      	b.n	8004172 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b14      	cmp	r3, #20
 8003f7e:	f200 80f0 	bhi.w	8004162 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fdd 	.word	0x08003fdd
 8003f8c:	08004163 	.word	0x08004163
 8003f90:	08004163 	.word	0x08004163
 8003f94:	08004163 	.word	0x08004163
 8003f98:	0800401d 	.word	0x0800401d
 8003f9c:	08004163 	.word	0x08004163
 8003fa0:	08004163 	.word	0x08004163
 8003fa4:	08004163 	.word	0x08004163
 8003fa8:	0800405f 	.word	0x0800405f
 8003fac:	08004163 	.word	0x08004163
 8003fb0:	08004163 	.word	0x08004163
 8003fb4:	08004163 	.word	0x08004163
 8003fb8:	0800409f 	.word	0x0800409f
 8003fbc:	08004163 	.word	0x08004163
 8003fc0:	08004163 	.word	0x08004163
 8003fc4:	08004163 	.word	0x08004163
 8003fc8:	080040e1 	.word	0x080040e1
 8003fcc:	08004163 	.word	0x08004163
 8003fd0:	08004163 	.word	0x08004163
 8003fd4:	08004163 	.word	0x08004163
 8003fd8:	08004121 	.word	0x08004121
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fa0c 	bl	8004400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0208 	orr.w	r2, r2, #8
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	619a      	str	r2, [r3, #24]
      break;
 800401a:	e0a5      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fa72 	bl	800450c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6999      	ldr	r1, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	619a      	str	r2, [r3, #24]
      break;
 800405c:	e084      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fad1 	bl	800460c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0208 	orr.w	r2, r2, #8
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0204 	bic.w	r2, r2, #4
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	61da      	str	r2, [r3, #28]
      break;
 800409c:	e064      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fb2f 	bl	8004708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69d9      	ldr	r1, [r3, #28]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	61da      	str	r2, [r3, #28]
      break;
 80040de:	e043      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fb72 	bl	80047d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0204 	bic.w	r2, r2, #4
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800411e:	e023      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fbb0 	bl	800488c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004160:	e002      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
      break;
 8004166:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIM_ConfigClockSource+0x1c>
 8004194:	2302      	movs	r3, #2
 8004196:	e0b6      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x18a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d4:	d03e      	beq.n	8004254 <HAL_TIM_ConfigClockSource+0xd8>
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041da:	f200 8087 	bhi.w	80042ec <HAL_TIM_ConfigClockSource+0x170>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	f000 8086 	beq.w	80042f2 <HAL_TIM_ConfigClockSource+0x176>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d87f      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 80041ec:	2b70      	cmp	r3, #112	; 0x70
 80041ee:	d01a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0xaa>
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d87b      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 80041f4:	2b60      	cmp	r3, #96	; 0x60
 80041f6:	d050      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x11e>
 80041f8:	2b60      	cmp	r3, #96	; 0x60
 80041fa:	d877      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 80041fc:	2b50      	cmp	r3, #80	; 0x50
 80041fe:	d03c      	beq.n	800427a <HAL_TIM_ConfigClockSource+0xfe>
 8004200:	2b50      	cmp	r3, #80	; 0x50
 8004202:	d873      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d058      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x13e>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d86f      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 800420c:	2b30      	cmp	r3, #48	; 0x30
 800420e:	d064      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15e>
 8004210:	2b30      	cmp	r3, #48	; 0x30
 8004212:	d86b      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 8004214:	2b20      	cmp	r3, #32
 8004216:	d060      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15e>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d867      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05c      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15e>
 8004220:	2b10      	cmp	r3, #16
 8004222:	d05a      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15e>
 8004224:	e062      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6899      	ldr	r1, [r3, #8]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f000 fc03 	bl	8004a40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	609a      	str	r2, [r3, #8]
      break;
 8004252:	e04f      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f000 fbec 	bl	8004a40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004276:	609a      	str	r2, [r3, #8]
      break;
 8004278:	e03c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	461a      	mov	r2, r3
 8004288:	f000 fb60 	bl	800494c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2150      	movs	r1, #80	; 0x50
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fbb9 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004298:	e02c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 fb7f 	bl	80049aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2160      	movs	r1, #96	; 0x60
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fba9 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80042b8:	e01c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f000 fb40 	bl	800494c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fb99 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80042d8:	e00c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 fb90 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80042ea:	e003      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e000      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a32      	ldr	r2, [pc, #200]	; (80043ec <TIM_Base_SetConfig+0xdc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <TIM_Base_SetConfig+0x28>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d003      	beq.n	8004338 <TIM_Base_SetConfig+0x28>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <TIM_Base_SetConfig+0xe0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d108      	bne.n	800434a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <TIM_Base_SetConfig+0xdc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <TIM_Base_SetConfig+0x6a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d00f      	beq.n	800437a <TIM_Base_SetConfig+0x6a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <TIM_Base_SetConfig+0xe0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00b      	beq.n	800437a <TIM_Base_SetConfig+0x6a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a23      	ldr	r2, [pc, #140]	; (80043f4 <TIM_Base_SetConfig+0xe4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d007      	beq.n	800437a <TIM_Base_SetConfig+0x6a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <TIM_Base_SetConfig+0xe8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <TIM_Base_SetConfig+0x6a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a21      	ldr	r2, [pc, #132]	; (80043fc <TIM_Base_SetConfig+0xec>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d108      	bne.n	800438c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <TIM_Base_SetConfig+0xdc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <TIM_Base_SetConfig+0xc0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <TIM_Base_SetConfig+0xe4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_Base_SetConfig+0xc0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <TIM_Base_SetConfig+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0xc0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <TIM_Base_SetConfig+0xec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a28      	ldr	r2, [pc, #160]	; (80044fc <TIM_OC1_SetConfig+0xfc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_OC1_SetConfig+0x78>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a27      	ldr	r2, [pc, #156]	; (8004500 <TIM_OC1_SetConfig+0x100>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_OC1_SetConfig+0x78>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a26      	ldr	r2, [pc, #152]	; (8004504 <TIM_OC1_SetConfig+0x104>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC1_SetConfig+0x78>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a25      	ldr	r2, [pc, #148]	; (8004508 <TIM_OC1_SetConfig+0x108>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10c      	bne.n	8004492 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0308 	bic.w	r3, r3, #8
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <TIM_OC1_SetConfig+0xfc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_OC1_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a18      	ldr	r2, [pc, #96]	; (8004500 <TIM_OC1_SetConfig+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_OC1_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <TIM_OC1_SetConfig+0x104>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_OC1_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a16      	ldr	r2, [pc, #88]	; (8004508 <TIM_OC1_SetConfig+0x108>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0210 	bic.w	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0320 	bic.w	r3, r3, #32
 800455a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a24      	ldr	r2, [pc, #144]	; (80045fc <TIM_OC2_SetConfig+0xf0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10d      	bne.n	800458c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <TIM_OC2_SetConfig+0xf0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00b      	beq.n	80045ac <TIM_OC2_SetConfig+0xa0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a1a      	ldr	r2, [pc, #104]	; (8004600 <TIM_OC2_SetConfig+0xf4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_OC2_SetConfig+0xa0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a19      	ldr	r2, [pc, #100]	; (8004604 <TIM_OC2_SetConfig+0xf8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC2_SetConfig+0xa0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_OC2_SetConfig+0xfc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d113      	bne.n	80045d4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a23      	ldr	r2, [pc, #140]	; (80046f8 <TIM_OC3_SetConfig+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10d      	bne.n	800468a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004688:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <TIM_OC3_SetConfig+0xec>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00b      	beq.n	80046aa <TIM_OC3_SetConfig+0x9e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a19      	ldr	r2, [pc, #100]	; (80046fc <TIM_OC3_SetConfig+0xf0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <TIM_OC3_SetConfig+0x9e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a18      	ldr	r2, [pc, #96]	; (8004700 <TIM_OC3_SetConfig+0xf4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <TIM_OC3_SetConfig+0x9e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a17      	ldr	r2, [pc, #92]	; (8004704 <TIM_OC3_SetConfig+0xf8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d113      	bne.n	80046d2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800

08004708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <TIM_OC4_SetConfig+0xb8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_OC4_SetConfig+0x7c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <TIM_OC4_SetConfig+0xbc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_OC4_SetConfig+0x7c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC4_SetConfig+0xc0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC4_SetConfig+0x7c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_OC4_SetConfig+0xc4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d109      	bne.n	8004798 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800

080047d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <TIM_OC5_SetConfig+0xac>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00b      	beq.n	8004842 <TIM_OC5_SetConfig+0x72>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <TIM_OC5_SetConfig+0xb0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <TIM_OC5_SetConfig+0x72>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <TIM_OC5_SetConfig+0xb4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC5_SetConfig+0x72>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <TIM_OC5_SetConfig+0xb8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d109      	bne.n	8004856 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	051b      	lsls	r3, r3, #20
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a16      	ldr	r2, [pc, #88]	; (800493c <TIM_OC6_SetConfig+0xb0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00b      	beq.n	8004900 <TIM_OC6_SetConfig+0x74>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <TIM_OC6_SetConfig+0xb4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_OC6_SetConfig+0x74>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <TIM_OC6_SetConfig+0xb8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_OC6_SetConfig+0x74>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a13      	ldr	r2, [pc, #76]	; (8004948 <TIM_OC6_SetConfig+0xbc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d109      	bne.n	8004914 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	029b      	lsls	r3, r3, #10
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0201 	bic.w	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 030a 	bic.w	r3, r3, #10
 8004988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0210 	bic.w	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 0307 	orr.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2201      	movs	r2, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e054      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a24      	ldr	r2, [pc, #144]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10c      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e040      	b.n	8004c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fabe 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	; 0x24
 8004bd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fb82 	bl	80052f0 <UART_SetConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e022      	b.n	8004c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fcac 	bl	800555c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fd33 	bl	80056a0 <UART_CheckIdleState>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d13d      	bne.n	8004cd6 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_UART_Receive_DMA+0x22>
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e036      	b.n	8004cd8 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_UART_Receive_DMA+0x34>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e02f      	b.n	8004cd8 <HAL_UART_Receive_DMA+0x94>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	69f9      	ldr	r1, [r7, #28]
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fdf5 	bl	80058bc <UART_Start_Receive_DMA>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	e000      	b.n	8004cd8 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b0ba      	sub	sp, #232	; 0xe8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d0e:	4013      	ands	r3, r2
 8004d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d115      	bne.n	8004d48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 82a3 	beq.w	8005284 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
      }
      return;
 8004d46:	e29d      	b.n	8005284 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8117 	beq.w	8004f80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d62:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <HAL_UART_IRQHandler+0x298>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 810a 	beq.w	8004f80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d011      	beq.n	8004d9c <HAL_UART_IRQHandler+0xbc>
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d011      	beq.n	8004dcc <HAL_UART_IRQHandler+0xec>
 8004da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2202      	movs	r2, #2
 8004dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc2:	f043 0204 	orr.w	r2, r3, #4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d011      	beq.n	8004dfc <HAL_UART_IRQHandler+0x11c>
 8004dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2204      	movs	r2, #4
 8004dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df2:	f043 0202 	orr.w	r2, r3, #2
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d017      	beq.n	8004e38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2e:	f043 0208 	orr.w	r2, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d012      	beq.n	8004e6a <HAL_UART_IRQHandler+0x18a>
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8209 	beq.w	8005288 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04f      	beq.n	8004f62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fdc2 	bl	8005a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d141      	bne.n	8004f5a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1d9      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d013      	beq.n	8004f52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <HAL_UART_IRQHandler+0x29c>)
 8004f30:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fd f92a 	bl	8002190 <HAL_DMA_Abort_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d017      	beq.n	8004f72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e00f      	b.n	8004f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9b6 	bl	80052c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e00b      	b.n	8004f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f9b2 	bl	80052c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e007      	b.n	8004f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9ae 	bl	80052c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004f70:	e18a      	b.n	8005288 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f72:	bf00      	nop
    return;
 8004f74:	e188      	b.n	8005288 <HAL_UART_IRQHandler+0x5a8>
 8004f76:	bf00      	nop
 8004f78:	04000120 	.word	0x04000120
 8004f7c:	08005ce5 	.word	0x08005ce5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	f040 8143 	bne.w	8005210 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 813c 	beq.w	8005210 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8135 	beq.w	8005210 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2210      	movs	r2, #16
 8004fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	f040 80b1 	bne.w	8005120 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 815c 	beq.w	800528c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f080 8154 	bcs.w	800528c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	f000 8085 	beq.w	8005104 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800500e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005016:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005024:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005028:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005030:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800503c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1da      	bne.n	8004ffa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005068:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800506c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005070:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800507a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e1      	bne.n	8005044 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e3      	bne.n	8005080 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	f023 0310 	bic.w	r3, r3, #16
 80050d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80050e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e4      	bne.n	80050c4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd f80d 	bl	800211e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005110:	b29b      	uxth	r3, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8dd 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800511e:	e0b5      	b.n	800528c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800512c:	b29b      	uxth	r3, r3
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80a7 	beq.w	8005290 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80a2 	beq.w	8005290 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800516e:	647b      	str	r3, [r7, #68]	; 0x44
 8005170:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e4      	bne.n	800514c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	623b      	str	r3, [r7, #32]
   return(result);
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051a6:	633a      	str	r2, [r7, #48]	; 0x30
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e3      	bne.n	8005182 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 0310 	bic.w	r3, r3, #16
 80051e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	69b9      	ldr	r1, [r7, #24]
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	617b      	str	r3, [r7, #20]
   return(result);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e4      	bne.n	80051cc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f865 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800520e:	e03f      	b.n	8005290 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00e      	beq.n	800523a <HAL_UART_IRQHandler+0x55a>
 800521c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fd96 	bl	8005d64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005238:	e02d      	b.n	8005296 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00e      	beq.n	8005264 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01c      	beq.n	8005294 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
    }
    return;
 8005262:	e017      	b.n	8005294 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d012      	beq.n	8005296 <HAL_UART_IRQHandler+0x5b6>
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00c      	beq.n	8005296 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fd47 	bl	8005d10 <UART_EndTransmit_IT>
    return;
 8005282:	e008      	b.n	8005296 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005284:	bf00      	nop
 8005286:	e006      	b.n	8005296 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <HAL_UART_IRQHandler+0x5b6>
      return;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005294:	bf00      	nop
  }

}
 8005296:	37e8      	adds	r7, #232	; 0xe8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b8a      	ldr	r3, [pc, #552]	; (8005544 <UART_SetConfig+0x254>)
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	430b      	orrs	r3, r1
 8005326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a78      	ldr	r2, [pc, #480]	; (8005548 <UART_SetConfig+0x258>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d120      	bne.n	80053ae <UART_SetConfig+0xbe>
 800536c:	4b77      	ldr	r3, [pc, #476]	; (800554c <UART_SetConfig+0x25c>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d817      	bhi.n	80053a8 <UART_SetConfig+0xb8>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0x90>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	08005391 	.word	0x08005391
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a3 	.word	0x080053a3
 800538c:	08005397 	.word	0x08005397
 8005390:	2300      	movs	r3, #0
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e01d      	b.n	80053d2 <UART_SetConfig+0xe2>
 8005396:	2302      	movs	r3, #2
 8005398:	77fb      	strb	r3, [r7, #31]
 800539a:	e01a      	b.n	80053d2 <UART_SetConfig+0xe2>
 800539c:	2304      	movs	r3, #4
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e017      	b.n	80053d2 <UART_SetConfig+0xe2>
 80053a2:	2308      	movs	r3, #8
 80053a4:	77fb      	strb	r3, [r7, #31]
 80053a6:	e014      	b.n	80053d2 <UART_SetConfig+0xe2>
 80053a8:	2310      	movs	r3, #16
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e011      	b.n	80053d2 <UART_SetConfig+0xe2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a67      	ldr	r2, [pc, #412]	; (8005550 <UART_SetConfig+0x260>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d102      	bne.n	80053be <UART_SetConfig+0xce>
 80053b8:	2300      	movs	r3, #0
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e009      	b.n	80053d2 <UART_SetConfig+0xe2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a64      	ldr	r2, [pc, #400]	; (8005554 <UART_SetConfig+0x264>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d102      	bne.n	80053ce <UART_SetConfig+0xde>
 80053c8:	2300      	movs	r3, #0
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e001      	b.n	80053d2 <UART_SetConfig+0xe2>
 80053ce:	2310      	movs	r3, #16
 80053d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053da:	d15b      	bne.n	8005494 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80053dc:	7ffb      	ldrb	r3, [r7, #31]
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d827      	bhi.n	8005432 <UART_SetConfig+0x142>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <UART_SetConfig+0xf8>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800540d 	.word	0x0800540d
 80053ec:	08005415 	.word	0x08005415
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	08005433 	.word	0x08005433
 80053f8:	08005423 	.word	0x08005423
 80053fc:	08005433 	.word	0x08005433
 8005400:	08005433 	.word	0x08005433
 8005404:	08005433 	.word	0x08005433
 8005408:	0800542b 	.word	0x0800542b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800540c:	f7fe fa8e 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8005410:	61b8      	str	r0, [r7, #24]
        break;
 8005412:	e013      	b.n	800543c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005414:	f7fe faac 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8005418:	61b8      	str	r0, [r7, #24]
        break;
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541c:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <UART_SetConfig+0x268>)
 800541e:	61bb      	str	r3, [r7, #24]
        break;
 8005420:	e00c      	b.n	800543c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005422:	f7fe fa0d 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8005426:	61b8      	str	r0, [r7, #24]
        break;
 8005428:	e008      	b.n	800543c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542e:	61bb      	str	r3, [r7, #24]
        break;
 8005430:	e004      	b.n	800543c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	77bb      	strb	r3, [r7, #30]
        break;
 800543a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d074      	beq.n	800552c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	005a      	lsls	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	441a      	add	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	b29b      	uxth	r3, r3
 8005458:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b0f      	cmp	r3, #15
 800545e:	d916      	bls.n	800548e <UART_SetConfig+0x19e>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005466:	d212      	bcs.n	800548e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f023 030f 	bic.w	r3, r3, #15
 8005470:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	b29b      	uxth	r3, r3
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	b29a      	uxth	r2, r3
 800547e:	89fb      	ldrh	r3, [r7, #14]
 8005480:	4313      	orrs	r3, r2
 8005482:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	89fa      	ldrh	r2, [r7, #14]
 800548a:	60da      	str	r2, [r3, #12]
 800548c:	e04e      	b.n	800552c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	77bb      	strb	r3, [r7, #30]
 8005492:	e04b      	b.n	800552c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005494:	7ffb      	ldrb	r3, [r7, #31]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d827      	bhi.n	80054ea <UART_SetConfig+0x1fa>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0x1b0>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	080054eb 	.word	0x080054eb
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	080054e3 	.word	0x080054e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fa32 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80054c8:	61b8      	str	r0, [r7, #24]
        break;
 80054ca:	e013      	b.n	80054f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fa50 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 80054d0:	61b8      	str	r0, [r7, #24]
        break;
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b20      	ldr	r3, [pc, #128]	; (8005558 <UART_SetConfig+0x268>)
 80054d6:	61bb      	str	r3, [r7, #24]
        break;
 80054d8:	e00c      	b.n	80054f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe f9b1 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80054de:	61b8      	str	r0, [r7, #24]
        break;
 80054e0:	e008      	b.n	80054f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	61bb      	str	r3, [r7, #24]
        break;
 80054e8:	e004      	b.n	80054f4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77bb      	strb	r3, [r7, #30]
        break;
 80054f2:	bf00      	nop
    }

    if (pclk != 0U)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	085a      	lsrs	r2, r3, #1
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	b29b      	uxth	r3, r3
 800550e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d908      	bls.n	8005528 <UART_SetConfig+0x238>
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d204      	bcs.n	8005528 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	e001      	b.n	800552c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005538:	7fbb      	ldrb	r3, [r7, #30]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	efff69f3 	.word	0xefff69f3
 8005548:	40013800 	.word	0x40013800
 800554c:	40021000 	.word	0x40021000
 8005550:	40004400 	.word	0x40004400
 8005554:	40004800 	.word	0x40004800
 8005558:	007a1200 	.word	0x007a1200

0800555c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01a      	beq.n	8005672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565a:	d10a      	bne.n	8005672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b0:	f7fb fe94 	bl	80013dc <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d10e      	bne.n	80056e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f82d 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e023      	b.n	800572a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d10e      	bne.n	800570e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f817 	bl	8005732 <UART_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e00d      	b.n	800572a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b09c      	sub	sp, #112	; 0x70
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005742:	e0a5      	b.n	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574a:	f000 80a1 	beq.w	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fb fe45 	bl	80013dc <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <UART_WaitOnFlagUntilTimeout+0x32>
 800575e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005760:	2b00      	cmp	r3, #0
 8005762:	d13e      	bne.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005778:	667b      	str	r3, [r7, #100]	; 0x64
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	663b      	str	r3, [r7, #96]	; 0x60
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e067      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d04f      	beq.n	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fe:	d147      	bne.n	8005890 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005808:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800581e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800582e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e6      	bne.n	800580a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	613b      	str	r3, [r7, #16]
   return(result);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	66bb      	str	r3, [r7, #104]	; 0x68
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800585c:	623a      	str	r2, [r7, #32]
 800585e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	61bb      	str	r3, [r7, #24]
   return(result);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e010      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	f43f af4a 	beq.w	8005744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3770      	adds	r7, #112	; 0x70
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b096      	sub	sp, #88	; 0x58
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2222      	movs	r2, #34	; 0x22
 80058e4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02b      	beq.n	8005946 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <UART_Start_Receive_DMA+0x138>)
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <UART_Start_Receive_DMA+0x13c>)
 80058fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <UART_Start_Receive_DMA+0x140>)
 8005904:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	2200      	movs	r2, #0
 800590c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	4619      	mov	r1, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	461a      	mov	r2, r3
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	f7fc fb9d 	bl	8002060 <HAL_DMA_Start_IT>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2210      	movs	r2, #16
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e051      	b.n	80059ea <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	657b      	str	r3, [r7, #84]	; 0x54
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596c:	64bb      	str	r3, [r7, #72]	; 0x48
 800596e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800597a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	653b      	str	r3, [r7, #80]	; 0x50
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059a0:	637a      	str	r2, [r7, #52]	; 0x34
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e5      	bne.n	8005980 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	613b      	str	r3, [r7, #16]
   return(result);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d4:	623a      	str	r2, [r7, #32]
 80059d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	6a3a      	ldr	r2, [r7, #32]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3758      	adds	r7, #88	; 0x58
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08005b13 	.word	0x08005b13
 80059f8:	08005c31 	.word	0x08005c31
 80059fc:	08005c69 	.word	0x08005c69

08005a00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b089      	sub	sp, #36	; 0x24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	613b      	str	r3, [r7, #16]
   return(result);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e6      	bne.n	8005a08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005a40:	bf00      	nop
 8005a42:	3724      	adds	r7, #36	; 0x24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b095      	sub	sp, #84	; 0x54
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
 8005a74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d118      	bne.n	8005af4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f023 0310 	bic.w	r3, r3, #16
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	613b      	str	r3, [r7, #16]
   return(result);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e6      	bne.n	8005ac2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b06:	bf00      	nop
 8005b08:	3754      	adds	r7, #84	; 0x54
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b09c      	sub	sp, #112	; 0x70
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d070      	beq.n	8005c0a <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e6      	bne.n	8005b30 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	667b      	str	r3, [r7, #100]	; 0x64
 8005b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b82:	647a      	str	r2, [r7, #68]	; 0x44
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bac:	663b      	str	r3, [r7, #96]	; 0x60
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bcc:	2220      	movs	r2, #32
 8005bce:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d118      	bne.n	8005c0a <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f023 0310 	bic.w	r3, r3, #16
 8005bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	69b9      	ldr	r1, [r7, #24]
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	617b      	str	r3, [r7, #20]
   return(result);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e6      	bne.n	8005bd8 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d107      	bne.n	8005c22 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c1c:	f7ff fb5c 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c20:	e002      	b.n	8005c28 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005c22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c24:	f7fa feea 	bl	80009fc <HAL_UART_RxCpltCallback>
}
 8005c28:	bf00      	nop
 8005c2a:	3770      	adds	r7, #112	; 0x70
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d109      	bne.n	8005c5a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	4619      	mov	r1, r3
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fb40 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c58:	e002      	b.n	8005c60 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff fb28 	bl	80052b0 <HAL_UART_RxHalfCpltCallback>
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d109      	bne.n	8005ca4 <UART_DMAError+0x3c>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b21      	cmp	r3, #33	; 0x21
 8005c94:	d106      	bne.n	8005ca4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f7ff feae 	bl	8005a00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d109      	bne.n	8005cc6 <UART_DMAError+0x5e>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b22      	cmp	r3, #34	; 0x22
 8005cb6:	d106      	bne.n	8005cc6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005cc0:	6978      	ldr	r0, [r7, #20]
 8005cc2:	f7ff fec3 	bl	8005a4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ccc:	f043 0210 	orr.w	r2, r3, #16
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd6:	6978      	ldr	r0, [r7, #20]
 8005cd8:	f7ff faf4 	bl	80052c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cdc:	bf00      	nop
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff fade 	bl	80052c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	613b      	str	r3, [r7, #16]
   return(result);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff faa0 	bl	800529c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5c:	bf00      	nop
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	; (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	; (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	; (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f000 f880 	bl	8005e90 <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08005ee0 	.word	0x08005ee0
 8005db4:	08005ee0 	.word	0x08005ee0
 8005db8:	08005ee0 	.word	0x08005ee0
 8005dbc:	08005ee4 	.word	0x08005ee4

08005dc0 <memcpy>:
 8005dc0:	440a      	add	r2, r1
 8005dc2:	4291      	cmp	r1, r2
 8005dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dc8:	d100      	bne.n	8005dcc <memcpy+0xc>
 8005dca:	4770      	bx	lr
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd6:	4291      	cmp	r1, r2
 8005dd8:	d1f9      	bne.n	8005dce <memcpy+0xe>
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <memset>:
 8005ddc:	4402      	add	r2, r0
 8005dde:	4603      	mov	r3, r0
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memset+0xa>
 8005de4:	4770      	bx	lr
 8005de6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dea:	e7f9      	b.n	8005de0 <memset+0x4>

08005dec <fmaxf>:
 8005dec:	b508      	push	{r3, lr}
 8005dee:	ed2d 8b02 	vpush	{d8}
 8005df2:	eeb0 8a40 	vmov.f32	s16, s0
 8005df6:	eef0 8a60 	vmov.f32	s17, s1
 8005dfa:	f000 f82d 	bl	8005e58 <__fpclassifyf>
 8005dfe:	b148      	cbz	r0, 8005e14 <fmaxf+0x28>
 8005e00:	eeb0 0a68 	vmov.f32	s0, s17
 8005e04:	f000 f828 	bl	8005e58 <__fpclassifyf>
 8005e08:	b130      	cbz	r0, 8005e18 <fmaxf+0x2c>
 8005e0a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	dc01      	bgt.n	8005e18 <fmaxf+0x2c>
 8005e14:	eeb0 8a68 	vmov.f32	s16, s17
 8005e18:	eeb0 0a48 	vmov.f32	s0, s16
 8005e1c:	ecbd 8b02 	vpop	{d8}
 8005e20:	bd08      	pop	{r3, pc}

08005e22 <fminf>:
 8005e22:	b508      	push	{r3, lr}
 8005e24:	ed2d 8b02 	vpush	{d8}
 8005e28:	eeb0 8a40 	vmov.f32	s16, s0
 8005e2c:	eef0 8a60 	vmov.f32	s17, s1
 8005e30:	f000 f812 	bl	8005e58 <__fpclassifyf>
 8005e34:	b148      	cbz	r0, 8005e4a <fminf+0x28>
 8005e36:	eeb0 0a68 	vmov.f32	s0, s17
 8005e3a:	f000 f80d 	bl	8005e58 <__fpclassifyf>
 8005e3e:	b130      	cbz	r0, 8005e4e <fminf+0x2c>
 8005e40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e48:	d401      	bmi.n	8005e4e <fminf+0x2c>
 8005e4a:	eeb0 8a68 	vmov.f32	s16, s17
 8005e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005e52:	ecbd 8b02 	vpop	{d8}
 8005e56:	bd08      	pop	{r3, pc}

08005e58 <__fpclassifyf>:
 8005e58:	ee10 3a10 	vmov	r3, s0
 8005e5c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8005e60:	d00d      	beq.n	8005e7e <__fpclassifyf+0x26>
 8005e62:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8005e66:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005e6a:	d30a      	bcc.n	8005e82 <__fpclassifyf+0x2a>
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <__fpclassifyf+0x34>)
 8005e6e:	1e42      	subs	r2, r0, #1
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d908      	bls.n	8005e86 <__fpclassifyf+0x2e>
 8005e74:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8005e78:	4258      	negs	r0, r3
 8005e7a:	4158      	adcs	r0, r3
 8005e7c:	4770      	bx	lr
 8005e7e:	2002      	movs	r0, #2
 8005e80:	4770      	bx	lr
 8005e82:	2004      	movs	r0, #4
 8005e84:	4770      	bx	lr
 8005e86:	2003      	movs	r0, #3
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	007ffffe 	.word	0x007ffffe

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr
